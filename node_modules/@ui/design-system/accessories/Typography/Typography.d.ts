import React from 'react';
export declare type TypographyVariant = 'primary' | 'secondary' | 'tertiary' | 'with-background' | 'brand-primary' | 'brand-secondary' | 'warning' | 'warning-contrast' | 'error' | 'error-contrast' | 'success' | 'success-contrast' | 'disabled';
export declare type TypographyType = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'subtitle' | 'body' | 'caption' | 'micro' | 'custom';
export interface TypographyProps {
    /**
     * Тип текста - заголовок, обычный текст, мини текст и т.д.
     * По умолчанию, также управляет тем, в каком HTML теге будет отображаться текст:
     * `h` теги соответствуют указанному типу, для остальных типов применяется `span`.
     * При необходимости, можно изменить тег параметром `htmlTag`, тогда к нему будут применяться стили,
     * соответствующие указанному типу текста.
     * При выборе `custom`, можно указать произвольные параметры font-size и font-family и line-height,
     * которые будут применены к тексту вместо стандартных параметров из типа `body`.
     * Тип `custom` разрешено использовать только в самых крайних случаях.
     * <a target="_blank" href="https://www.figma.com/file/fArCOY2LDXgPpFcABkA4QY/Renins-%2F-Web-Typo?node-id=2%3A6">Подробнее о типах текста</a>
     */
    type?: TypographyType;
    /**
     * Вариант текста - от этого зависит выбор цвета шрифта из стандартного набора.
     * <a target="_blank" href="https://www.figma.com/file/zKtZTuV21TB4a1vL9AsI0y/Common-%2F-Color-Styles?node-id=0%3A1">Подробнее о цветах текста</a>
     */
    variant?: TypographyVariant;
    /**
     * HTML-тег, в котором будет отображаться текст. Необходимо указывать валидные для простого текста теги:
     * `div`, `span` и тд. Теги `button` или `a`, как и любые другие "функциональные" не будут работать корректно.
     * Также необходимо учитывать нюансы отображения на странице блочных/строковых тегов.
     * ВАЖНО!!! Не рекомендуется злоупотреблять кастомизацией без веской причины,
     * так как это нарушит корректность и валидность разметки.
     */
    htmlTag?: keyof HTMLElementTagNameMap;
    /**
     * Не работает с `h` типами и `subtitle`.
     * Указывает что шрифт должен быть жирным. Работает аналогично указанию тега `b`,
     * но, в отличие от последнего, не принуждает к использованию строкового типа тега.
     */
    bold?: boolean;
    /**
     * Только для `custom`. Размер шрифта (`font-size`). Если указано число, автоматически считается
     * пикселями. Также можно передать число с единицами изменения (2em, 1vh).
     */
    size?: string | number;
    /**
     * Только для `custom`. Высота строки (`line-height`). Если указано число, автоматически считается
     * пикселями. Также можно передать число с единицами изменения (2em, 1vh).
     */
    height?: string | number;
    /**
     * Только для `custom`. Тип шрифта. Если отличается от стандартных,
     * должен быть подключен к приложению отдельно.
     */
    family?: string;
    /**
     * Дочерний элемент - должен быть строкой или строковым элементом (span, b, и т.д)
     */
    children?: React.ReactNode;
    /**
     * Строка с HEX кодом цвета для текста, указывается только в самый крайних случаях.
     * В большинстве случаев, стоит обратить внимание на свойство `variant`.
     */
    color?: string;
    /**
     * Дополнительные классы. Нужны для кастомизации стилей (например, отступов) или написания селекторов в тестах.
     */
    className?: string;
}
/**
 * Универсальный текстовый блок. Используется для стандартизации стилей всех текстов.
 */
declare const Typography: React.FC<TypographyProps>;
export declare const defaultTypographyProps: TypographyProps;
export default Typography;
