import React from 'react';
export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
    /**
     * Вариант кнопки - от этого зависят ее стили.
     */
    variant?: 'primary' | 'brand-secondary' | 'secondary' | 'tertiary' | 'transparent' | 'error' | 'error-alt' | 'warning' | 'warning-alt' | 'success' | 'success-alt' | 'on-color' | 'custom' | 'control-icon' | 'white';
    /**
     * Позволяет использовать кнопку в качестве ссылки. Не влияет на стили.
     * Кнопка будет обернута в тег `a`.
     */
    href?: string;
    /**
     * Определяет окно в которое будет загружаться веб-страница, открытая по ссылке.
     * Работает только с параметром `href`.
     */
    target?: React.HTMLAttributeAnchorTarget;
    /**
     * Кнопка, содержащая ТОЛЬКО иконку и ничего больше.
     * Сама иконка передаётся в параметрах `content` или `children`.
     */
    icon?: boolean;
    /**
     * Описание кнопки-иконки для скринридера.
     */
    iconDescriptionText?: string;
    /**
     * Параметр позволяющий использовать оригинальный цвет иконки.
     */
    useDefaultIconColor?: boolean;
    /**
     * Минимальная ширина кнопки-иконки в пикселях, работает только если передан пропс icon,
     * задается для предотвращения уменьшения размеров иконки в случае если контент не
     * помещается в контейнер и начинает масштабироваться.
     */
    minIconWidth?: number;
    /**
     * Минимальная высота кнопки-иконки в пикселях, работает только если передан пропс icon,
     * задается для предотвращения уменьшения размеров иконки в случае если контент не
     * Помещается в контейнер и начинает масштабироваться.
     */
    minIconHeight?: number;
    /**
     * Размер кнопки.
     */
    size?: 'xxs' | 'xs' | 's' | 'm' | 'l';
    /**
     * Загрузка. Показывает лоадер в кнопке вместо контента.
     */
    loading?: boolean;
    /**
     * Активность. Определяет, доступен ли клик по кнопке.
     */
    disabled?: boolean;
    /**
     * Цвет кнопки, действует только при variant `custom`.
     */
    color?: string;
    /**
     * Цвет текста, действует только при variant `custom`.
     */
    textColor?: string;
    /**
     * Цвет кнопки при наведении, действует только при variant `custom`.
     */
    hoverColor?: string;
    /**
     * Позиция иконки при использовании с текстом кнопки. От нее зависят боковые отступы.
     * При использовании ТОЛЬКО иконки (`icon`), не имеет смысла.
     */
    iconPosition?: 'left' | 'right';
    /**
     * Ширина кнопки.
     * При значении 'true' будет зависеть от ее контента.
     * Рекомендуется использовать только когда кнопка единственная в строке.
     */
    autoWidth?: boolean;
    /**
     * Дополнительные классы. Нужны для кастомизации стилей или селекторов для UI тестов.
     */
    className?: string;
    /**
     * Контент кнопки (не использовать одновременно с children).
     */
    content?: string;
    /**
     * Контент кнопки. Дочерний элемент, обёрнутый в кнопку
     * (не использовать одновременно с content).
     */
    children?: React.ReactNode;
    /**
     * Идентификатор кнопки в HTML разметке документа. Обычно применяется в качестве селектора.
     * Должен быть уникальным.
     */
    id?: string;
    /**
     * Видимость. Определяет, отображается ли кнопка в разметке.
     */
    hidden?: boolean;
    /**
     * Выравнивание текста и иконки внутри кнопки.
     * Имеет смысл в некоторых ситуациях, но только если кнопка не имеет параметра `autoWidth`.
     * Использует `flex` параметр для применения соответствующих стилей.
     * <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content" target="_blank">Подробнее о justify-content</a>
     */
    justifyContent?: 'center' | 'start' | 'end';
    /**
     * Позволяет отключить перенос текста и принудительно расположить текст в кнопке в одну линию.
     */
    disableTextWrap?: boolean;
    /**
     * Обработчик клика по кнопке.
     */
    onClick?: (event?: React.MouseEvent<HTMLButtonElement>) => void | Promise<void>;
}
/**
 * Кнопка. Используется для активации какого-либо действия при клике.
 * По дефолту принимает стиль primary
 */
declare const Button: React.FC<ButtonProps>;
export declare const defaultButtonProps: ButtonProps;
export default Button;
