import React from 'react';
import { FieldHeight } from './types';
/**
 * Набор свойств, характерный для `Base` контролов, использующих BaseControlWrapper.
 */
export interface LightControlProps {
    /**
     * Идентификатор контрола в рамках формы/виджета, обязателен для работы синхронизации.
     */
    name: string;
    /**
     * Идентификатор контрола в HTML разметке документа. Обычно применяется в качестве селектора.
     * Должен быть уникальным.
     */
    id?: string;
    /**
     * Отображаемое название контрола.
     */
    caption?: string;
    /**
     * Имеется ли в контроле значение.
     */
    hasValue?: boolean;
    /**
     * Активность. Определяет, доступно ли редактирование.
     */
    disabled?: boolean;
    /**
     * Вариант высоты контрола.
     */
    fieldHeight?: FieldHeight;
    /**
     * Дополнительные классы для контрола (оболочки). Нужны для кастомизации стилей или селекторов для UI тестов.
     */
    className?: string;
}
interface LightControlWrapperInternalProps extends LightControlProps {
    /**
     * Кастомизация внешнего вида курсора, в засисимости от используемого внутри компонента.
     */
    cursor?: 'default' | 'pointer' | 'text';
    /**
     * Имеется ли фокус на контроле. Влияет на некоторые стили.
     */
    focus?: boolean;
    /**
     * Дочерний элемент, обёрнутый в контрол.
     */
    children?: React.ReactNode;
    /**
     * Дополнительная кнопка в контроле. Только компонент Button с типом `control-icon`.
     * Может содержать исключительно иконку.
     * Клик по кнопке должен быть обработан за пределами контрола.
     * Использовать с осторожностью, учитывать ширину кнопки и доступную область внутри контрола.
     */
    button?: React.ReactNode;
    /**
     * Обработчик клика за пределами контрола. Срабатывает только если клик совершен по элементу,
     * который не вложен в контрол или не является частью контрола.
     */
    onOutsideClick?: (e: MouseEvent) => void;
    /**
     * Обработчик клика по wrapper. Можно использовать при необходимости, например, установить фокус на вложенный инпут,
     * когда клик был не по самому инпуту.
     * Не срабатывает при disabled.
     */
    onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;
    /**
     * Ссылка на "привязанный" к контролу портал, используется в некоторых компонентах.
     * Нужна для корректной обработки `onOutsideClick`
     */
    linkedPortalRef?: React.MutableRefObject<HTMLDivElement>;
}
declare const LightControlWrapper: React.ForwardRefExoticComponent<LightControlWrapperInternalProps & React.RefAttributes<HTMLDivElement>>;
export default LightControlWrapper;
