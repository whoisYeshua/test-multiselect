import React from 'react';
import { Direction } from '../../types';
import { ControlProps } from '../BaseControlWrapper/ControlWrapper';
import { SelectableControlItem } from '../Select/useStateManager';
export interface SelectButtonItemProps<Item extends SelectableControlItem = SelectableControlItem> extends ControlProps {
    /**
     *  Объект содержащий информацию об опции для рендера и обработки клика
     */
    item: Item;
    /**
     *  Состояние кнопки
     */
    checked: boolean;
    /**
     *  Общее количество кнопок, необходимо для рассчёта минимальной ширины каждой из кнопок.
     */
    maxItems: number;
    /**
     * Направление размещения элементов.
     * Колонкой сверху вниз или строкой слева направо.
     * В режиме строки необходимо внимательно относиться к доступной ширине экрана и к адаптивности.
     */
    direction: Direction;
    /**
     * Передаётся из контрола. Режим с возможностью выбора нескольких опций.
     */
    isGroupMode?: boolean;
    /**
     * Передаётся из контрола. Используется для расчёта некоторых стилей.
     */
    hasPreviousButtonChecked?: boolean;
    /**
     * Передаётся из контрола. Используется для расчёта некоторых стилей.
     */
    hasNextButtonChecked?: boolean;
    /**
     *  Уникальный идентификатор инпута для кнопки в группе
     */
    id: string;
    /**
     *  Уникальный идентификатор лейбла для кнопки в группе
     */
    labelId: string;
    /**
     * Обработчик изменений значения. Интерфейс соответствует существующему контракту IRIS.
     */
    onChange: (code: Item['code']) => void;
    /**
     * Функция для изменения отрисовки лейбла кнопки.
     * <a href="/?path=/docs/design-system-справочник-рендер-функции--docs#рендер-функции-в-компонентах">Рендер-функция</a>
     */
    renderCustomLabel?: (item: Item, checked?: boolean) => React.ReactNode;
}
/**
 * Вариант для выбора из SelectButton. Без SelectButton не используется.
 */
declare const SelectButtonItem: <Item extends SelectableControlItem>(props: SelectButtonItemProps<Item>) => JSX.Element;
export default SelectButtonItem;
