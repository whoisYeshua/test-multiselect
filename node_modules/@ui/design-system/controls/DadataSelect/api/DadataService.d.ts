import { DescriptionContentItem, Service } from '../DadataSelect';
import { AddRequestBodyReturnValue } from './helpers/addRequestBody';
import { Services } from '../../Dadata/types';
declare type LocationsBoost = Record<string, string>[];
declare global {
    interface Window {
        __dadata_url__: string;
    }
}
declare type ConstructorOptions = {
    service?: Service;
    detectLocation?: boolean;
    onDetectAddressError?: (e: unknown) => void;
    onFetchSuggestionsError?: (e: unknown) => void;
};
export default class DadataService<T extends Service> {
    endpoint: string;
    locations_boost: LocationsBoost;
    onDetectAddressError: (e: unknown) => void | undefined;
    onFetchSuggestionsError: (e: unknown) => void | undefined;
    constructor({ service, detectLocation, onDetectAddressError, onFetchSuggestionsError, }: ConstructorOptions);
    detectAddress: () => void;
    fetchSuggestions: (body: AddRequestBodyReturnValue, showDescriptions: boolean, visibleValueKey?: string, descriptionContentKeys?: DescriptionContentItem[]) => Promise<Services[T][]>;
}
export {};
