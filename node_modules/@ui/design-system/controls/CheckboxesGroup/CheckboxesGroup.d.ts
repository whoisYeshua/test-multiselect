import { ReactElement } from 'react';
import { ControlProps } from '../BaseControlWrapper/ControlWrapper';
import { SelectableControlItem } from '../Select/useStateManager';
import { CheckboxProps } from '../Checkbox/Checkbox';
import { СolorScheme } from '../BaseControlWrapper/types';
import { Direction } from '../../types';
import { TooltipProps } from '../../accessories/Tooltip/Tooltip';
export interface CheckBoxGroupItem extends SelectableControlItem {
    /**
     * Уникальный идентификатор чекбокса/кнопки в группе.
     * Необходим для корректной обработки клика по лейблу.
     */
    id?: string;
    /**
     * Состояние чекбокса/кнопки, индивидуально для каждого в группе
     */
    checked?: boolean;
    /**
     * Значение чекбокса/кнопки. Отправляется в обработчик `onChange` при изменении.
     * Соответствующая опция должна быть обработана и её статус `checked` должен быть изменён.
     * Если не указано, в `onChange` будет передаваться `code`, обязательный для всех опций.
     */
    value?: string;
    /**
     * Определяет внешний вид чекбокса в группе:
     * `default` - классическая "галочка".
     * `toggle` - переключатель с анимированным "плавающим" индикатором.
     * Имеет приоритет над общими стилями группы, позволяет выделить отдельные чекбоксы, применив им другой визуальный стиль.
     */
    variant?: CheckboxProps['variant'];
}
export declare type OnChangeGroupItemValue<Item extends CheckBoxGroupItem> = Item['value'] extends string ? Item['value'] : Item['code'];
export interface CheckboxesGroupProps<Item extends CheckBoxGroupItem = CheckBoxGroupItem> extends ControlProps {
    /**
     * Задаёт имя группы (group) для связывания input-ов.
     */
    name: string;
    /**
     * Список со значениями для чекбоксов.
     * <a href="/?path=/story/design-system-справочник-сложные-типы-данных-в-компонентах--docs">Сложный тип данных</a>
     */
    items: Item[];
    /**
     * Определяет внешний вид чекбоксов в группе:
     * `default` - классическая "галочка".
     * `toggle` - переключатель с анимированным "плавающим" индикатором.
     * Также можно указать отдельный параметр вида для каждого из чекбоксов.
     */
    variant?: CheckboxProps['variant'];
    /**
     * Направление размещения элементов.
     * Колонкой сверху вниз или строкой слева направо.
     * В режиме строки необходимо внимательно относиться к доступной ширине экрана и к адаптивности.
     */
    direction?: Direction;
    /**
     * Позволяет указать размер отступа.
     * В режиме `column` отступ применяется только по вертикали.
     * В режиме `row` отступ применяется как по горизонтали, так и по вертикали в случае переноса строки.
     */
    itemsMargin?: number;
    /**
     * Обработчик изменений значения.
     */
    onChange?: (props: CheckboxesGroupProps<Item>, value: OnChangeGroupItemValue<Item>) => Promise<void> | void;
    /**
     * Обработчик события начала редактирования значения. Вызывается по фокусу.
     */
    onEditStart?: (props: CheckboxesGroupProps<Item>) => Promise<void> | void;
    /**
     * Обработчик события завершения редактирования значения. Вызывается после потери фокуса.
     */
    onEditEnd?: (props: CheckboxesGroupProps<Item>) => Promise<void> | void;
    /**
     * Обработчик клика по иконке индивидуального тултипа у опции.
     * В отличие от `onTooltipClick`, возвращает не только все параметры тултипа,
     * но и параметры опции, к которой он присвоен вторым аргументом.
     * ВНИМАНИЕ! Даже при указании обработчика,
     * тултип автоматически отображается/скрывается при наведении/удалении курсора:
     * обработка клика позволяет расширить функциональность тултипа, но не заменяет стандартную.
     */
    onItemTooltipClick?: (tooltipProps: TooltipProps, itemProps: CheckBoxGroupItem) => void;
    /**
     * Вариант цветовой палитры чекбоксов.
     */
    colorScheme?: СolorScheme;
}
export declare const defaultCheckboxesGroupProps: Partial<CheckboxesGroupProps>;
export declare type CheckboxesGroupType = <Item extends CheckBoxGroupItem>(props: CheckboxesGroupProps<Item>) => ReactElement;
declare const _default: CheckboxesGroupType;
export default _default;
