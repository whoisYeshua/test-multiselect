import React, { ReactElement } from 'react';
import { ControlProps } from '../BaseControlWrapper/ControlWrapper';
import { SelectableControlItem } from '../Select/useStateManager';
import { СolorScheme } from '../BaseControlWrapper/types';
import { Direction } from '../../types';
import { TooltipProps } from '../../accessories/Tooltip/Tooltip';
export interface RadioGroupProps<Item extends SelectableControlItem = SelectableControlItem> extends ControlProps {
    /**
     * Выбранное значение радио-кнопки
     */
    value: Item['code'] | null;
    /**
     * Список возможных значений
     * <a href="/?path=/story/design-system-справочник-сложные-типы-данных-в-компонентах--docs">Сложный тип данных</a>
     */
    items: Item[];
    /**
     * Вариант радио группы - от этого зависят ее стили.
     */
    colorScheme?: СolorScheme;
    /**
     * Если компонент расположен на цветном фоне, для корректной отрисовки кнопок,
     * необходимо указать цвет этого самого фона, а также `colorScheme` === `onColor`.
     */
    backgroundColor?: string;
    /**
     * Направление размещения элементов.
     * Колонкой сверху вниз или строкой слева направо.
     * В режиме строки необходимо внимательно относиться к доступной ширине экрана и к адаптивности.
     */
    direction?: Direction;
    /**
     * Позволяет указать размер отступа.
     * В режиме `column` отступ применяется только по вертикали.
     * В режиме `row` отступ применяется как по горизонтали, так и по вертикали в случае переноса строки.
     */
    itemsMargin?: number;
    /**
     * Обработчик изменений значения.
     */
    onChange?: (props: RadioGroupProps<Item>, newValue: Item['code']) => Promise<void> | void;
    /**
     * Обработчик события начала редактирования значения. Вызывается по фокусу.
     */
    onEditStart?: (props: RadioGroupProps<Item>) => Promise<void> | void;
    /**
     * Обработчик события завершения редактирования значения. Вызывается после потери фокуса.
     */
    onEditEnd?: (props: RadioGroupProps<Item>) => Promise<void> | void;
    /**
     * Функция для изменения отображаемого лейбла.
     * <a href="/?path=/docs/design-system-справочник-рендер-функции--docs#рендер-функции-в-компонентах">Рендер-функция</a>
     */
    renderCustomLabel?: (item: Item, checked?: boolean) => React.ReactNode;
    /**
     * Обработчик клика по иконке индивидуального тултипа у опции.
     * В отличие от `onTooltipClick`, возвращает не только все параметры тултипа,
     * но и параметры опции, к которой он присвоен вторым аргументом.
     * ВНИМАНИЕ! Даже при указании обработчика,
     * тултип автоматически отображается/скрывается при наведении/удалении курсора:
     * обработка клика позволяет расширить функциональность тултипа, но не заменяет стандартную.
     */
    onItemTooltipClick?: (tooltipProps: TooltipProps, itemProps: Item) => void;
}
export declare const defaultRadioGroupProps: {
    itemsMargin: number;
    direction: string;
    colorScheme: string;
    backgroundColor: string;
    disabled: boolean;
    locked: boolean;
    hidden: boolean;
    showTooltip: boolean;
};
/**
 * Список. Используется для выбора одного значения из нескольких.
 */
export declare type RadioGroupType = <Item extends SelectableControlItem>(props: RadioGroupProps<Item>) => ReactElement;
declare const _default: RadioGroupType;
export default _default;
