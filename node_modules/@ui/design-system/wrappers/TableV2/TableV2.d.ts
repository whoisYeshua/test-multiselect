import React from 'react';
import { ScreenWidthShortcut } from '../../types';
export interface TableProps {
    /**
     * Сборная информация о заголовках столбцов таблицы и их свойствах
     * Состоит из элементов HeaderProps - данных для отдельного столбца таблицы.
     * Список необходимых для элемента HeaderProps свойств:
     * Имя заголовка для колонки - header: string | React.ReactNode;
     * Подзаголовок у заголовка, если нужен - headerSubtitle?: null | string;
     * Идентификатор, связывающий заголовок с данными. - accessor: string - обязателен даже при пустом заголовке.;
     * Отключение сортировки для конкретного столбца таблицы. - disableSorting: boolean;
     * columnDataType - тип данных в колонке. При типе данных 'text' возможна сортировка значений,
     * при этом подразумевается что значения представлены простыми числами или строками;
     * Возможность задать сложный тип ячеек с заданием дополнительных
     * параметров. - cellType: поддерживаемые варианты на текущий момент 'styled-text' и 'styled-icon';
     * styled-text означает добавление для всего столбца расширенных текстовых ячеек
     * с подзаголовком и/или тултипом, контекстным меню, отдельной кнопкой копирования
     * текста в буфер обмена, параметры передаются в пропсе rowsData, вместо значения
     * для ячейки передается список свойств, указанных внутри объекта:
     * cellTitle(основная часть текста), cellTitlePreview(текстовое превью ячейки
     * в режиме тултипа), cellSubtitle(содержимое подзаголовка), cellSubtitlePreview
     * (текстовое превью подзаголовка ячейки в режиме тултипа),
     * isTooltipAvailable(подключение тултипа со скрытием части текста и кнопки
     * копирования текста в буфер обмена - true/false),
     * isContextMenuButtonAvailable (добавление к ячейке кнопки, открывающей контекстное меню с
     * функциями копирования и редактирования).
     * пример того, как надо задавать свойства внутри rowsData: 'name': { cellTitle: 'John',
     * cellSubtitle: 'Wayne' } - при этом 'name' должен совпадать с accessor: 'name' в интерфейсе HeaderProps
     * styled-icon добавляет внутрь ячейки иконку, поддерживает следующие свойства:
     * disabled: true/false - блокировка иконки по какому-либо условию,
     * onClick: функция-обработчик клика по иконке.
     * <a href="/?path=/story/design-system-справочник-сложные-типы-данных-в-компонентах--page">Сложный тип данных</a>
     */
    headersData?: HeaderProps[];
    /**
     * Сборная информация о ячейках таблицы, группировка построчно.
     * При отсутствии значения необходимо указывать пустую строку.
     */
    rowsData?: Record<HeaderProps['accessor'], string | number | React.ReactNode | Record<string, string | number | boolean>>[];
    /**
     * Количество элементов, отображаемое на одной странице - может быть одно или несколько значений в массиве.
     * При группировке по страницам данный пропс обязателен так как первое значение массива задает
     * начальное количество строк на одной странице!
     */
    itemsPerPage?: number[];
    /**
     * Подключение группировки элементов таблицы по страницам.
     */
    isPaginationAvailable?: boolean;
    /**
     * Высота строк таблицы.
     */
    rowHeight?: 's' | 'm';
    /**
     * Массив с номерами столбцов, текст в которых будет выровнен по центру.
     */
    centeredColumns?: number[];
    /**
     * Возможность задать ширину колонки, отличную от стандартной: как пример в пикселях '200px' либо 'auto'.
     */
    columnWidth?: string;
    /**
     * Возможность задать минимальную ширину колонки, отличную от стандартной: как пример в пикселях '150px'.
     * При уменьшении ширины окна данный параметр определяет, при какой ширине появится горизонтальный скролл.
     */
    columnMinWidth?: string;
    /**
     * Отступ снизу - задается в случае, если нужно свободное место для выпадающего списка страниц,
     * задается в пикселях = '150px'.
     */
    bottomOffset?: string;
    /**
     * Отключение видимости селекта с выбором номера текущей страницы.
     */
    disablePaginationPageSelector?: boolean;
    /**
     * Отключение видимости селекта с выбором количества строк на странице.
     */
    disablePaginationPageCount?: boolean;
    /**
     * Отображение рядом с иконками слов Вперед и Назад на кнопках перехода на следующую и предыдущую страницу.
     */
    paginationButtonText?: boolean;
    /**
     * Переключение пагинатора на уменьшенную мобильную версию при переходе в режим планшета и смартфона.
     * По умолчанию для всех значений ширины экрана сохраняется основной вариант
     * с горизонтальным скроллом при нехватке ширины экрана.
     */
    mobilePaginator?: boolean;
    /**
     * Обработчик изменений значения ячейки.
     */
    onCellChange?: (newValue: string, rowIndex: number, columnAccessor: string) => Promise<void> | void;
    /**
     * Дополнительные классы. Нужны для кастомизации стилей или селекторов для UI тестов.
     * Ячейки таблицы td имеют селектор по классу вида .table-cell-1-1, первым идет номер строки, далее номер столбца.
     * Заголовки таблицы th имеют селектор по классу вида .table-header-1.
     */
    className?: string;
    /**
     * Разрешение экрана в виде строкового тега. Передается автоматически из контекста размера экрана.
     */
    screenWidthShortcut?: ScreenWidthShortcut;
}
export interface HeaderProps {
    /**
     * Имя заголовка для колонки.
     */
    header: string | React.ReactNode;
    /**
     * Подзаголовок у заголовка.
     */
    headerSubtitle?: null | string;
    /**
     * Идентификатор, связывающий заголовок с данными - обязателен даже при пустом заголовке.
     */
    accessor: string;
    /**
     * Отключение сортировки для конкретного столбца таблицы.
     */
    disableSorting?: boolean;
    /**
     * Перевод колонки в состояние disabled.
     */
    columnDisabled?: boolean;
    /**
     * Тип ячеек для колонки.
     */
    cellType?: string;
    /**
     * Тип данных в колонке. При типе данных 'text' возможна сортировка значений, при этом подразумевается
     * что значения представлены простыми числами или строками.
     */
    columnDataType?: string;
}
/**
 * Обновленная версия таблицы - используется для отображения разного типа данных, как простых, вроде чисел либо текста,
 * так и различных компонентов дизайн системы вроде чекбоксов, также в ячейке может быть валидная html разметка.
 * Поддерживается сортировка данных в столбцах таблицы, а также распределение данных по нескольким страницам.
 */
declare const TableV2: React.FC<TableProps>;
export declare const defaultTableProps: Partial<TableProps>;
export default TableV2;
