import { MonthType } from '@datepicker-react/hooks';
import { ScreenWidthShortcut } from '../../../types';
import { CalendarPosition } from '../components/Calendar';
import { MonthItemArgs } from '../types';
export interface DateOfDay {
    dayLabel: string;
    date: Date;
    isDayNotOfTheCurrentMonth?: boolean;
}
export declare const getDateFormat: (date: string) => string;
export declare const isInvalidDate: (date: string | Date | null) => boolean;
export declare const parseDate: (date: string | Date | null) => Date | null;
export declare const formatDate: (date: Date | null) => string | null;
/**
 * Парсинг массива с датами из строк типа 'DD.MM.YYYY' в js Date
 */
export declare const remapDates: (disabledDates?: string[]) => Date[];
export declare const getMonthsQuantity: (screenWidthShortcut?: ScreenWidthShortcut, isRange?: boolean) => 2 | 1;
export declare const isDateInvalidOrDisabled: (date: string | Date | null, disabledDates: Date[], minDate: Date, maxDate: Date) => boolean;
export declare const isRangeIncorrectOrDisabled: (startDate: string | Date | null, endDate: string | Date | null, disabledDates: Date[]) => boolean;
export declare const getMapDays: (days: (number | DateOfDay)[], year: number, month: number, isRange: boolean) => (number | DateOfDay)[];
export declare const getSimplebarMaxHeight: (position: CalendarPosition) => 212 | 242;
export declare const getRangeDateValue: (startDate: Date, endDate: Date) => {
    startDate: string;
    endDate: string;
};
export declare const checkForDateExists: (date: string | null) => boolean;
export declare const checkPrevNavButtonDisabledStatus: (activeMonth: MonthType, month: number, year: number) => boolean;
export declare const checkNextNavButtonDisabledStatus: (activeMonth: MonthType, month: number, year: number) => boolean;
export declare const getInitialVisibleMonth: (minBookingDate: Date | undefined, maxBookingDate: Date | undefined, isRange: boolean) => Date;
export declare const getMonthItems: ({ currentYear, minYear, maxYear, minMonth, maxMonth }: MonthItemArgs) => import("../../Select").SelectableControlItem[];
