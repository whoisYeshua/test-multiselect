import { ReactElement } from 'react';
import { ExternalControlWrapperProps } from '../BaseControlWrapper/ControlWrapper';
import { SelectValue, SelectableControlItem, ClearValue } from './useStateManager';
export interface SelectProps<Item extends SelectableControlItem = SelectableControlItem, IsMulti extends boolean = false, UseFullItem extends boolean = false> extends ExternalControlWrapperProps {
    /**
     * Список возможных значений.
     * <a href="/?path=/story/design-system-справочник-сложные-типы-данных-в-компонентах--docs">Сложный тип данных</a>.
     * Избегать <a href="/?path=/story/design-system-справочник-ссылочный-тип--docs">прямой передачи массива</a>
     */
    items?: Item[];
    /**
     * Режим контрола, при котором в выпадающем списке появляется дополнительная строка с описанием.
     * Работает если в items есть объект с полем `description`
     */
    showDescription?: boolean;
    /**
     * Плейсхолдер, отображается когда есть фокус, но ничего не выбрано.
     */
    placeholder?: string;
    /**
     * Позволяет создавать пользовательские опции, если желаемого значения нету в списке доступных для выбора.
     * При обработке выбора созданного значения в `onChange`,
     * он должен попадать в список `items`, чтобы далее быть доступным.
     */
    creatable?: boolean;
    /**
     * Добавляет возможность фильтровать значения из списка при помощи ввода с клавиатуры.
     */
    searchable?: boolean;
    /**
     * При использовании параметра `searchable`, позволяет указать код опции,
     * которая будет демонстрироваться пользователю, если ничего не найдено.
     * По умолчанию, если ничего не найдено, будет отображена соответствующая надпись и никаких опций.
     */
    defaultSearchValue?: Item['code'] | Item['code'][];
    /**
     * Режим контрола, при котором поле ввода текста будет отображаться в дропдаун меню.
     * Работает только в сочетании с `searchable` и `isMulti`.
     * Добавляет возможность фильтровать значения из списка при помощи ввода с клавиатуры.
     */
    searchInDropdown?: boolean;
    /**
     * Если доступен поиск опций, можно также кастомизировать текст сообщения об отсутствующих результатах.
     */
    notFoundMessage?: string;
    /**
     * Дополнение к режиму `searchable`. В этом режиме нужно указать обработчик `onOptionsSearch`,
     * который должен принимать в параметрах значение из инпута для поиска и создавать `Promise`,
     * возвращающий список опций при выполнении.
     * Логика запроса опций и обработки ошибок должна быть реализована на стороне приложения в этом обработчике.
     * При использовании асинхронной загрузки опций, параметр `items` не обязателен
     * и может быть использован только для первоначального списка.
     * Для корректного отображения загруженного асинхронно элемента, рекомендуется использовать `useFullItem`,
     * в противном случае, при обновлении `value`, будет отображён только сохранённый `code` от айтема, а не `label`.
     */
    async?: boolean;
    /**
     * Можно ли очистить выбранное значение
     */
    clearable?: boolean;
    /**
     * Режим контрола, при котором опции в выпадающем списке будут отображены в виде checkbox
     */
    checkboxOptions?: boolean;
    /**
     * Режим контрола, при котором добавляется опция `Выбрать все`.
     * Работает только в режиме `checkboxOptions`
     */
    pickAllOptions?: boolean;
    /**
     * Режим контрола, при котором все выбранные значения будут отображаться в контроле, высота контрола будет
     * изменяться
     */
    showAllSelectedLabel?: boolean;
    /**
     * Добавляет интервал задержки вызова обработчика `onOptionsSearch` в милисекундах.
     * Если указать `null`, обработчик `onOptionsSearch` будет вызываться на ввод каждого символа.
     * В таком случае, рекомендуется оптимизировать обработку ввода для поиска опций на стороне приложения.
     */
    debounceTimer?: number | null;
    /**
     * Приветственное сообщение для селекта с режимом асинхронного поиска опций `async`.
     * Отображается, когда доступные опции ещё не загружены и пользователь ещё не начал ввод.
     */
    acyncSearchMessage?: string;
    /**
     * Обработчик ввода в поле поиска опций. Работает только в сочетании с `searchable` и `async`.
     * Принимает в качестве аргумента строку ввода пользователя и должен возвращать `Promise` с массивом `items`,
     * в соответствии с введённым значением.
     * Для корректной типизации `Item` при использовании асинхронного режима,
     * необходимо описать интерфейс на стороне приложения и передать в `items` пустой массив айтемов,
     * соответствующих интерфейсу.
     * Пример: `const emptyItems: SelectItem[] = []; <Select {...props} items={emptyItems} />`
     */
    onOptionsSearch?: (query: string) => Promise<Item[] | void>;
    /**
     * Сообщение об ошибке, при проблемах с загрузкой опций.
     */
    optionsLoadingErrorMessage?: string;
    /**
     * Режим контрола, при котором как поле `value`, так и обработчик `onChange`
     * работают с полным объектом `item`, вместо кода.
     */
    useFullItem?: UseFullItem;
    /**
     * Заголовок для выпадающего списка значений.
     */
    optionsTitle?: string;
    /**
     * Добавляет возможность выбора нескольких значений.
     */
    isMulti?: IsMulti;
    /**
     *  Выбранное значение селекта.
     */
    value?: SelectValue<Item, IsMulti, UseFullItem> | ClearValue<Item, IsMulti, UseFullItem> | null;
    /**
     *  Подставляет значение которое было введено ранее. По-умолчанию выключено.
     */
    autoComplete?: 'on' | 'off';
    /**
     * Обработчик изменений значения.
     */
    onChange?: (props: SelectProps<Item, IsMulti, UseFullItem>, newValue: SelectValue<Item, IsMulti, UseFullItem> | ClearValue<Item, IsMulti, UseFullItem>) => Promise<void> | void;
    /**
     * Обработчик события начала редактирования значения. Вызывается по фокусу.
     */
    onEditStart?: (props: SelectProps<Item, IsMulti, UseFullItem>) => Promise<void> | void;
    /**
     * Обработчик события завершения редактирования значения. Вызывается после потери фокуса.
     */
    onEditEnd?: (props: SelectProps<Item, IsMulti, UseFullItem>) => Promise<void> | void;
    /**
     * СЛУЖЕБНЫЙ ПАРАМЕТР, ИСПОЛЬЗУЕТСЯ ТОЛЬКО В ЗАВИСИМЫХ КОМПОНЕНТАХ!
     * Режим контрола, при котором значение селекта будет отображаться в элементе input.
     * Работает только в сочетании с `value` и `onChange`.
     * (не работает в режиме Multi)
     */
    showValueInInput?: boolean;
    /**
     * СЛУЖЕБНЫЙ ПАРАМЕТР, ИСПОЛЬЗУЕТСЯ ТОЛЬКО В ЗАВИСИМЫХ КОМПОНЕНТАХ!
     * Параметр, необходимый для поддержки режима `CombinedSelect`.
     * Используется внутри соответствующего компонента.
     */
    isCombined?: boolean;
    /**
     * СЛУЖЕБНЫЙ ПАРАМЕТР, ИСПОЛЬЗУЕТСЯ ТОЛЬКО В ЗАВИСИМЫХ КОМПОНЕНТАХ!
     * Параметр, необходимый для поддержки режима `CombinedSelect`.
     * Используется внутри соответствующего компонента.
     */
    autoOpenNextStep?: boolean;
    /**
     * СЛУЖЕБНЫЙ ПАРАМЕТР, ИСПОЛЬЗУЕТСЯ ТОЛЬКО В ЗАВИСИМЫХ КОМПОНЕНТАХ!
     * Используется внутри `CombinedSelect` для определения условий блокировки инпута
     * при выборе последнего значения поля в списке.
     */
    inputDisabled?: boolean;
    /**
     * Тип инпута. Поддерживает тип `number` и `text`
     */
    inputType?: 'number' | 'text';
}
export declare const defaultSelectsProps: {
    disabled: boolean;
    locked: boolean;
    hidden: boolean;
    showTooltip: boolean;
    size: import("../BaseControlWrapper/styled/ControlBox").ControlBoxSize;
    scrollTopOffset: number;
};
export declare const defaultAsyncSelectProps: {
    notFoundMessage: string;
    debounceTimer: number;
    acyncSearchMessage: string;
    optionsLoadingErrorMessage: string;
    disabled: boolean;
    locked: boolean;
    hidden: boolean;
    showTooltip: boolean;
    size: import("../BaseControlWrapper/styled/ControlBox").ControlBoxSize;
    scrollTopOffset: number;
};
export declare const defaultMultiSelectProps: {
    showAllSelectedLabel: boolean;
    checkboxOptions: boolean;
    creatable: boolean;
};
export declare const defaultSelectSpecificProps: {
    items: any[];
    showValueInInput: boolean;
    showDescription: boolean;
    inputDisabled: boolean;
    isCombined: boolean;
    autoOpenNextStep: boolean;
    async: boolean;
    clearable: boolean;
    creatable: boolean;
    pickAllOptions: boolean;
    searchInDropdown: boolean;
    searchable: boolean;
    showAllSelectedLabel: boolean;
    checkboxOptions: boolean;
    notFoundMessage: string;
    debounceTimer: number;
    acyncSearchMessage: string;
    optionsLoadingErrorMessage: string;
    disabled: boolean;
    locked: boolean;
    hidden: boolean;
    showTooltip: boolean;
    size: import("../BaseControlWrapper/styled/ControlBox").ControlBoxSize;
    scrollTopOffset: number;
};
/**
 * Компонент для выбора значений из выпадающего списка.
 */
export declare type SelectType = <Item extends SelectableControlItem, IsMulti extends boolean = false, UseFullItem extends boolean = false>(props: SelectProps<Item, IsMulti, UseFullItem>) => ReactElement;
declare const _default: SelectType;
export default _default;
