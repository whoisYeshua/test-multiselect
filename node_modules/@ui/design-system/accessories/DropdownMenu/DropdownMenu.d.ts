import React, { ReactElement } from 'react';
import { IconProps } from '../../icons_helpers/types';
import { LinkProps } from '../Link/Link';
export interface DropdownItem {
    /**
     * Уникальный идентификатор пункта меню.
     * Применяется для обработки клика и для корректного рендера внутри итератора.
     */
    id: string | number;
    /**
     * Отображаемая пользователю надпись на кнопке или ссылке (в зависимости от `menuItemsVariant`)
     */
    label: string | number;
    /**
     * Иконка.
     * Отображается на кнопках, применяется только с `menuItemsVariant = 'button'`.
     * <a href="/?path=/docs/design-system-справочник-передача-компонента-в-качестве-параметра-в-другой-компонент--docs#передача-компонента-напрямую">Передаётся напрямую.</a>
     */
    Icon?: React.ComponentType<IconProps>;
    /**
     * Параметры для ссылки, применяется только с `menuItemsVariant = 'link'`.
     * Любые доступные параметры компонента `Link`.
     */
    linkParams?: LinkProps;
}
declare type MenuToggleHandler = () => void;
export interface DropdownMenuProps<I extends DropdownItem = DropdownItem> {
    /**
     * Элементы выпадающего меню.
     * <a href="/?path=/story/design-system-справочник-сложные-типы-данных-в-компонентах--docs">Сложный тип данных</a>
     */
    items: I[];
    /**
     * Вариант внешнего вида заголовка выпадающего меню.
     * `default` - кнопка с текстом и анимированной иконкой выпадающего меню.
     * `context` - кнопка без надписи и с иконкой контекстного меню.
     * Не применяется при использовании `renderCustomMenuButton`.
     */
    topButtonVariant?: 'default' | 'bordered' | 'context';
    /**
     * Текст на кнопке выпадающего меню.
     * Применяется и обязателен только при использовании `topButtonVariant = 'default' | 'bordered'`.
     * В остальных вариантах, а также в случае применения `renderCustomMenuButton` не учитывается.
     */
    topButtonText?: string;
    /**
     * Вариант внешнего вида элементов списка выпадающего меню.
     * `link` - ссылка с возможностью указать тип и адрес.
     * `button` - кнопка с возможностью указать текст и иконку.
     * Не применяется при использовании `renderCustomLabel`.
     */
    menuItemsVariant?: 'link' | 'button';
    /**
     * Функция, возвращающая JSX вёрстку, для рендера кнопки меню.
     * Заменяет варианты из `topButtonVariant`, в том числе все стили и анимации.
     * Применяется в случае необходимости кастомизации кнопки.
     * <a href="/?path=/docs/design-system-справочник-рендер-функции--docs#рендер-функции-в-компонентах">Рендер-функция</a>
     */
    renderCustomMenuButton?: (onClick: MenuToggleHandler) => React.ReactNode;
    /**
     * Функция, возвращающая JSX вёрстку, для рендера элементов выпадающего меню.
     * Заменяет варианты из `menuItemsVariant`, в том числе все стили и анимации.
     * Применяется в случае необходимости кастомизации кнопки.
     * <a href="/?path=/docs/design-system-справочник-рендер-функции--docs#рендер-функции-в-компонентах">Рендер-функция</a>
     */
    renderCustomLabel?: (item: I, onClick: DropdownMenuProps['onItemClick']) => React.ReactNode;
    /**
     * Обработчик клика по пункту выпадающего меню. Возвращает `id` пункта для обработки.
     * При использовании ссылок в качестве пунктов меню не обязателен.
     */
    onItemClick?: (id: I['id']) => void;
    /**
     * Дополнительные классы компонента. Нужны для кастомизации стилей или селекторов для UI тестов.
     */
    className?: string;
}
export declare const defaultDropdownMenuProps: Partial<DropdownMenuProps>;
export declare type DropdownMenuType = <I extends DropdownItem>(props: DropdownMenuProps<I>) => ReactElement;
declare const _default: DropdownMenuType;
export default _default;
