import React from 'react';
import { ScreenWidthShortcutWithUnknown } from '@ui/screen-size-provider';
import { ButtonVariant, OnButtonClick } from '../../accessories/Button/Button';
import { IconProps } from '../../icons_helpers/types';
import { NotificationVariant } from '../../accessories/Notification/Notification';
export interface CardProps {
    /**
     * Заголовок карточки.
     * Передаётся в виде обычного текста.
     */
    header: string;
    /**
     * Иконка в заголовке.
     * <a href="/?path=/docs/design-system-справочник-передача-компонента-в-качестве-параметра-в-другой-компонент--docs#передача-компонента-напрямую">Передаётся напрямую.</a>
     */
    Icon?: React.ComponentType<IconProps>;
    /**
     * Содержимое карточки. Определяет контент и разметку основной текстовой части.
     */
    children: React.ReactNode;
    /**
     * Текст для кнопки управления карточкой в десктопном/планшетном разрешении.
     */
    headerButtonText?: string;
    /**
     * Вариант стилизации кнопки - выбор возможен из вариантов для компонента Button.
     */
    headerButtonVariant?: ButtonVariant;
    /**
     * Обработчик клика по кнопке.
     * Если кнопка отсутствует, обработчик передавать нет смысла.
     */
    onButtonClick?: OnButtonClick;
    /**
     * Дополнительные классы. Нужны для кастомизации стилей или селекторов для UI тестов.
     */
    className?: string;
    /**
     * Разрешение экрана в виде строкового тега. Передается автоматически из контекста размера экрана.
     */
    screenWidthShortcut?: ScreenWidthShortcutWithUnknown;
    /**
     * Цветовая схема панели дополнительного сообщения.
     */
    notificationVariant?: NotificationVariant;
    /**
     * Иконка слева на панели дополнительного сообщения.
     * Имеет указанное по умолчанию значение.
     * Для скрытия иконки нужно передать `null`.
     * <a href="/?path=/docs/design-system-справочник-передача-компонента-в-качестве-параметра-в-другой-компонент--docs#передача-компонента-напрямую">Передаётся напрямую.</a>
     */
    NotificationIcon?: React.ComponentType<IconProps> | null;
    /**
     * Основной текст на панели дополнительного сообщения.
     */
    notificationText?: string | null;
    /**
     * Заголовок кнопки на панели дополнительного сообщения.
     */
    notificationButtonText?: string | null;
    /**
     * Обработчик клика по кнопке панели дополнительного сообщения.
     * Если кнопка отсутствует, обработчик передавать нет смысла.
     */
    onNotificationButtonClick?: () => void;
    /**
     * Опциональная иконка, заменяющая текст для кнопки управления карточкой в мобильном разрешении.
     * Для десктопного/планшетного разрешения обязательно передать текст кнопки в параметре `headerButtonText`.
     * Если отсутствует текст в `headerButtonText`, кнопка не будет отображаться.
     * Рекомендуется использовать иконку для всех мобильных макетов, так как текстовый заголовок кнопки не всегда может
     * коректно помещаться на экранах небольшой ширины.
     * <a href="/?path=/docs/design-system-справочник-передача-компонента-в-качестве-параметра-в-другой-компонент--docs#передача-компонента-напрямую">Передаётся напрямую.</a>
     */
    MobileHeaderButtonIcon?: React.ComponentType<IconProps>;
}
/**
 * Простая карточка для оформления любого контента с заголовком.
 * В отличие от Panel, не поддерживает использование сетки внутри.
 */
declare const Card: React.FC<CardProps>;
export declare const defaultCardProps: Partial<CardProps>;
export default Card;
