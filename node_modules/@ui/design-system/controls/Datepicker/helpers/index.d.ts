import { ScreenWidthShortcutWithUnknown } from '@ui/screen-size-provider';
import { MonthType } from '@datepicker-react/hooks';
import { DateFormat, MonthItemArgs } from '../types';
export interface DateOfDay {
    dayLabel: string;
    date: Date;
    isDayNotOfTheCurrentMonth?: boolean;
}
/**
 * Меняет формат дат с российского на ISO.
 * Игнорирует валидность даты (45 число 13 месяца и всё такое),
 * так как в некоторых случаях требуется переформатировать кривые даты
 */
export declare const RUSFormatToISO: (date: string) => string;
/**
 * Меняет формат дат с ISO на российский.
 * Игнорирует валидность даты (45 число 13 месяца и всё такое),
 * так как в некоторых случаях требуется переформатировать кривые даты
 */
export declare const ISOFormatToRUS: (date: string) => string;
export declare const isInvalidDate: (date: string | Date | null) => boolean;
export declare const parseDate: (date: string | Date | null) => Date;
/**
 * Конвертирует дату в формат ДД.ММ.ГГГГ или ISO.
 * Работает с датами формата ДД.ММ.ГГГГ, ISO, Date.
 * Возвращает null если передавать неизвестный формат
 */
export declare const formatDate: (date: Date | string | null, format?: DateFormat) => string;
/**
 * Парсинг массива с датами из строк типа 'DD.MM.YYYY' в js Date
 */
export declare const remapDates: (disabledDates?: string[]) => Date[];
export declare const getMonthsQuantity: (screenWidthShortcut?: ScreenWidthShortcutWithUnknown, isRange?: boolean) => 2 | 1;
export declare const isDateInvalidOrDisabled: (date: string | Date | null, disabledDates: Date[], minDate: Date, maxDate: Date) => boolean;
export declare const isRangeIncorrectOrDisabled: (startDate: string | Date | null, endDate: string | Date | null, disabledDates: Date[]) => boolean;
export declare const getMapDays: (days: (number | DateOfDay)[], year: number, month: number, isRange: boolean) => (number | DateOfDay)[];
export declare const checkForDateExists: (date: string | null) => boolean;
export declare const checkPrevNavButtonDisabledStatus: (activeMonth: MonthType, month: number, year: number) => boolean;
export declare const checkNextNavButtonDisabledStatus: (activeMonth: MonthType, month: number, year: number) => boolean;
export declare const getInitialVisibleMonth: (minBookingDate: Date | undefined, maxBookingDate: Date | undefined, isRange: boolean) => Date;
export declare const getMonthItems: ({ currentYear, minYear, maxYear, minMonth, maxMonth }: MonthItemArgs) => import("../../Select").SelectableControlItem[];
