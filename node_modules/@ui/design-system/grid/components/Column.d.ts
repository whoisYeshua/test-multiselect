import React from 'react';
import { GridColumnsParams } from '@ui/grid-columns-provider';
import { AlignItemsType, JustifyContentType } from '../types';
export interface ContainerColumnParams extends GridColumnsParams {
    /**
     * Информация о необходимости использовать дополнительный опциональный `breakpoint` - `lgDesktop`.
     * Автоматически наследуется из родительского контейнера.
     */
    useLgDesktop?: boolean;
}
export interface GridMargins {
    /**
     * Размер отступа сверху в пикселях на мобильном телефоне (обычно должен быть кратным 4).
     * Если не задано значение для более высокого разрешения, используется предыдущее.
     */
    mtMobile?: number;
    /**
     * Размер отступа сверху в пикселях на планшете (обычно должен быть кратным 4).
     * Если не задано значение для более высокого разрешения, используется предыдущее.
     */
    mtTablet?: number;
    /**
     * Размер отступа сверху в пикселях на десктопе (обычно должен быть кратным 4).
     * Если не задано значение для более высокого разрешения, используется предыдущее.
     */
    mtDesktop?: number;
    /**
     * Размер отступа сверху в пикселях на большом десктопе (обычно должен быть кратным 4).
     * Если не задано значение для более высокого разрешения, используется предыдущее.
     * Не применяется, если `useLgDesktop` не включен у родительского контейнера, так как он опциональный.
     */
    mtLgDesktop?: number;
    /**
     * Размер отступа снизу в пикселях на мобильном телефоне (обычно должен быть кратным 4).
     * Если не задано значение для более высокого разрешения, используется предыдущее.
     */
    mbMobile?: number;
    /**
     * Размер отступа снизу в пикселях на планшете (обычно должен быть кратным 4).
     * Если не задано значение для более высокого разрешения, используется предыдущее.
     */
    mbTablet?: number;
    /**
     * Размер отступа снизу в пикселях на десктопе (обычно должен быть кратным 4).
     * Если не задано значение для более высокого разрешения, используется предыдущее.
     */
    mbDesktop?: number;
    /**
     * Размер отступа снизу в пикселях на большом десктопе (обычно должен быть кратным 4).
     * Если не задано значение для более высокого разрешения, используется предыдущее.
     * Не применяется, если `useLgDesktop` не включен у родительского контейнера, так как он опциональный.
     */
    mbLgDesktop?: number;
}
export interface ColumnProps extends GridMargins {
    /**
     * Количество занимаемых колонок на мобильном телефоне (максимум задаётся в параметрах контейнера и наследуется).
     * Если указать 0, колонка вместе с содержимым будет скрыта на указанном разрешении при помощи стилей,
     * но не удалена из DOM.
     */
    mobile?: number;
    /**
     * Количество занимаемых колонок на планшете (максимум задаётся в параметрах контейнера и наследуется).
     * Если указать 0, колонка вместе с содержимым будет скрыта на указанном разрешении при помощи стилей,
     * но не удалена из DOM.
     */
    tablet?: number;
    /**
     * Количество занимаемых колонок на десктопе (максимум задаётся в параметрах контейнера и наследуется).
     * Если указать 0, колонка вместе с содержимым будет скрыта на указанном разрешении при помощи стилей,
     * но не удалена из DOM.
     */
    desktop?: number;
    /**
     * Количество занимаемых колонок на большом десктопе (максимум задаётся в параметрах контейнера и наследуется).
     * Если указать 0, колонка вместе с содержимым будет скрыта на указанном разрешении при помощи стилей,
     * но не удалена из DOM.
     * Не применяется, если `useLgDesktop` не включен у родительского контейнера, так как он опциональный.
     */
    lgDesktop?: number;
    /**
     * Скрытие колонки.
     * В отличие от ширины, равной 0, не просто скрывает колонку вместе с содержимым,
     * но и удаляет их из DOM при рендере.
     */
    hidden?: boolean;
    /**
     * Размер отступа слева в колонках на мобильном телефоне (оставляет пустые колонки слева от элемента).
     */
    offsetMobile?: number;
    /**
     * Размер отступа слева в колонках на планшете (оставляет пустые колонки слева от элемента).
     */
    offsetTablet?: number;
    /**
     * Размер отступа слева в колонках на десктопе (оставляет пустые колонки слева от элемента).
     */
    offsetDesktop?: number;
    /**
     * Размер отступа слева в колонках на большом десктопе (оставляет пустые колонки слева от элемента).
     * Не применяется, если `useLgDesktop` не включен у родительского контейнера, так как он опциональный.
     */
    offsetLgDesktop?: number;
    /**
     * `Flex` параметр, отвечающий за выравнивание контента по горизонтали внутри колонки на телефонах.
     * ВНИМАНИЕ! Использование этого параметра приведёт к тому, что элемент внутри колонки
     * в некоторых случаях может занимать не всю её ширину.
     * Если есть необходимость в размещении контента на всю ширину колонки - добавьте ему свойство `flex-grow: 1`.
     * <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content" target="_blank">Подробнее о justify-content</a>
     */
    justifyContentMobile?: JustifyContentType;
    /**
     * `Flex` параметр, отвечающий за выравнивание контента по вертикали внутри колонки на телефонах.
     * ВНИМАНИЕ! Использование этого параметра приведёт к тому, что элемент внутри колонки
     * в некоторых случаях может занимать не всю её ширину.
     * Если есть необходимость в размещении контента на всю ширину колонки - добавьте ему свойство `flex-grow: 1`.
     * <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items" target="_blank">Подробнее об align-items</a>
     */
    alignItemsMobile?: AlignItemsType;
    /**
     * `Flex` параметр, отвечающий за выравнивание контента по горизонтали внутри колонки на планшетах.
     * ВНИМАНИЕ! Использование этого параметра приведёт к тому, что элемент внутри колонки
     * в некоторых случаях может занимать не всю её ширину.
     * Если есть необходимость в размещении контента на всю ширину колонки - добавьте ему свойство `flex-grow: 1`.
     * <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content" target="_blank">Подробнее о justify-content</a>
     */
    justifyContentTablet?: JustifyContentType;
    /**
     * `Flex` параметр, отвечающий за выравнивание контента по вертикали внутри колонки на планшетах.
     * ВНИМАНИЕ! Использование этого параметра приведёт к тому, что элемент внутри колонки
     * в некоторых случаях может занимать не всю её ширину.
     * Если есть необходимость в размещении контента на всю ширину колонки - добавьте ему свойство `flex-grow: 1`.
     * <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items" target="_blank">Подробнее об align-items</a>
     */
    alignItemsTablet?: AlignItemsType;
    /**
     * `Flex` параметр, отвечающий за выравнивание контента по горизонтали внутри колонки на десктопах.
     * ВНИМАНИЕ! Использование этого параметра приведёт к тому, что элемент внутри колонки
     * в некоторых случаях может занимать не всю её ширину.
     * Если есть необходимость в размещении контента на всю ширину колонки - добавьте ему свойство `flex-grow: 1`.
     * <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content" target="_blank">Подробнее о justify-content</a>
     */
    justifyContentDesktop?: JustifyContentType;
    /**
     * `Flex` параметр, отвечающий за выравнивание контента по вертикали внутри колонки на десктопах.
     * ВНИМАНИЕ! Использование этого параметра приведёт к тому, что элемент внутри колонки
     * в некоторых случаях может занимать не всю её ширину.
     * Если есть необходимость в размещении контента на всю ширину колонки - добавьте ему свойство `flex-grow: 1`.
     * <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items" target="_blank">Подробнее об align-items</a>
     */
    alignItemsDesktop?: AlignItemsType;
    /**
     * `Flex` параметр, отвечающий за выравнивание контента по горизонтали внутри колонки на больших десктопах.
     * Не применяется, если `useLgDesktop` не включен у родительского контейнера, так как он опциональный.
     * ВНИМАНИЕ! Использование этого параметра приведёт к тому, что элемент внутри колонки
     * в некоторых случаях может занимать не всю её ширину.
     * Если есть необходимость в размещении контента на всю ширину колонки - добавьте ему свойство `flex-grow: 1`.
     * <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content" target="_blank">Подробнее о justify-content</a>
     */
    justifyContentLgDesktop?: JustifyContentType;
    /**
     * `Flex` параметр, отвечающий за выравнивание контента по вертикали внутри колонки на больших десктопах.
     * Не применяется, если `useLgDesktop` не включен у родительского контейнера, так как он опциональный.
     * ВНИМАНИЕ! Использование этого параметра приведёт к тому, что элемент внутри колонки
     * в некоторых случаях может занимать не всю её ширину.
     * Если есть необходимость в размещении контента на всю ширину колонки - добавьте ему свойство `flex-grow: 1`.
     * <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/align-items" target="_blank">Подробнее об align-items</a>
     */
    alignItemsLgDesktop?: AlignItemsType;
    /**
     * Дочерний элемент или группа элементов
     */
    children?: React.ReactNode;
    /**
     * Дополнительные классы. Нужны для кастомизации стилей или селекторов для UI тестов.
     */
    className?: string;
    /**
     * Идентификатор колонки в DOM.
     */
    id?: string;
    /**
     * Информация о максимальном количестве колонок у родительского контейнера.
     * Автоматически наследуется из него или использует дефолтные значения.
     */
    columnParams?: ContainerColumnParams;
}
/**
 * Колонка разметки сетки контента.
 */
declare const Column: {
    ({ children, className, mobile, tablet, desktop, lgDesktop, offsetMobile, offsetTablet, offsetDesktop, offsetLgDesktop, mtMobile, mtTablet, mtDesktop, mtLgDesktop, mbMobile, mbTablet, mbDesktop, mbLgDesktop, columnParams, id, hidden, justifyContentMobile, alignItemsMobile, justifyContentTablet, alignItemsTablet, justifyContentDesktop, alignItemsDesktop, justifyContentLgDesktop, alignItemsLgDesktop, }: ColumnProps): JSX.Element;
    defaultProps: {
        mobile: number;
        tablet: number;
        desktop: number;
        lgDesktop: number;
        offsetMobile: number;
        offsetTablet: number;
        offsetDesktop: number;
        offsetLgDesktop: number;
        mtMobile: number;
        mbMobile: number;
        hidden: boolean;
    };
};
export declare const defaultColumnProps: {
    mobile: number;
    tablet: number;
    desktop: number;
    lgDesktop: number;
    offsetMobile: number;
    offsetTablet: number;
    offsetDesktop: number;
    offsetLgDesktop: number;
    mtMobile: number;
    mbMobile: number;
    hidden: boolean;
};
export default Column;
