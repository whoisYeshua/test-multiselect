import React from 'react';
import { IconProps } from '../../icons_helpers/types';
interface TagMargins {
    top?: number;
    bottom?: number;
    left?: number;
    right?: number;
}
export interface TagProps {
    /**
     * Уникальный идентификатор лейбла.
     * Нужен для корректной обработки отрисовки в разметке при использовании итераторов,
     * а также для обработчиков клика.
     */
    id?: string | number | null;
    /**
     * Основной текст ярлыка.
     * Обязательно указывать как минимум один из вариантов содержимого - основной текст или иконку.
     */
    label?: string;
    /**
     * Дополнительный текст ярлыка.
     */
    subLabel?: string;
    /**
     * Иконка ярлыка.
     * Обязательно указывать как минимум один из вариантов содержимого - основной текст или иконку.
     * <a href="/?path=/docs/design-system-справочник-передача-компонента-в-качестве-параметра-в-другой-компонент--docs#передача-компонента-напрямую">Передаётся напрямую.</a>
     */
    Icon?: React.ComponentType<IconProps>;
    /**
     * Размер ярлыка.
     */
    size?: 'xs' | 's' | 'm' | 'l';
    /**
     * Вариант цветовой схемы ярлыка.
     */
    variant?: 'primary' | 'warning' | 'error' | 'success' | 'brand-primary' | 'brand-secondary';
    /**
     * Состояние заблокированного ярлыка.
     * Если активно, не реагирует на нажатия и не вызывает обработчики событий.
     */
    disabled?: boolean;
    /**
     * Дополнительные классы. Нужны для кастомизации стилей или селекторов для UI тестов.
     */
    className?: string;
    /**
     * Обработчик клика ПО ЯРЛЫКУ В ЛЮБОМ МЕСТЕ.
     * Если указан, клик обрабатывается и обработчик вызывается.
     * Если не указан, при клике ничего не происходит.
     */
    onLabelClick?: (id: TagProps['id']) => void;
    /**
     * Обработчик клика ПО СПЕЦИАЛЬНОЙ ИКОНКЕ КРЕСТИКА.
     * Если указан, в лейбле будет специально отображена иконка крестика, клик по которой и будет обработан.
     * Если не указан, иконки крестика не будет.
     * Никак не влияет на возможность передать свою иконку, однако если ярлык будет содержать ТОЛЬКО иконку,
     * дополнительная иконка крестика не будет отображена даже при наличии обработчика.
     * Если указан обработчик `onLabelClick` - данный обработчик
     * не будет работать и иконка крестика не будет отображаться
     */
    onCloseIconClick?: (id: TagProps['id']) => void;
    /**
     * Внешние отступы ярлыка.
     * Объект состоит из параметров отступа для каждой из сторон.
     * Оступы указываются числами в пикселях (без указания единиц измерения).
     */
    margins?: TagMargins;
    /**
     * Служебный параметр.
     * ТОЛЬКО ДЛЯ ЯРЛЫКА ВНУТРИ КОНТРОЛА.
     * Используется при синхронизации родительского контрола.
     * Блокирует обработку кликов по тегу или по иконке крестика.
     * В отличие от `disabled`, не влияет на визуальные стили тега.
     */
    locked?: boolean;
}
/**
 * Ярлык-тег.
 * Используется в некоторых компонентах, также доступен для использования отдельно.
 * Умеет обрабатывать клики как по ярлыку полностью, так и по отдельной кнопке закрытия.
 */
declare const Tag: {
    ({ id, className, label, subLabel, Icon, size, variant, disabled, onLabelClick, onCloseIconClick, margins, locked, }: TagProps): JSX.Element;
    defaultProps: {
        /**
         * Уникальный идентификатор лейбла.
         * Нужен для корректной обработки отрисовки в разметке при использовании итераторов,
         * а также для обработчиков клика.
         */
        id?: string | number | null;
        /**
         * Основной текст ярлыка.
         * Обязательно указывать как минимум один из вариантов содержимого - основной текст или иконку.
         */
        label?: string;
        /**
         * Дополнительный текст ярлыка.
         */
        subLabel?: string;
        /**
         * Иконка ярлыка.
         * Обязательно указывать как минимум один из вариантов содержимого - основной текст или иконку.
         * <a href="/?path=/docs/design-system-справочник-передача-компонента-в-качестве-параметра-в-другой-компонент--docs#передача-компонента-напрямую">Передаётся напрямую.</a>
         */
        Icon?: React.ComponentType<IconProps>;
        /**
         * Размер ярлыка.
         */
        size?: 'xs' | 's' | 'm' | 'l';
        /**
         * Вариант цветовой схемы ярлыка.
         */
        variant?: 'primary' | 'warning' | 'error' | 'success' | 'brand-primary' | 'brand-secondary';
        /**
         * Состояние заблокированного ярлыка.
         * Если активно, не реагирует на нажатия и не вызывает обработчики событий.
         */
        disabled?: boolean;
        /**
         * Дополнительные классы. Нужны для кастомизации стилей или селекторов для UI тестов.
         */
        className?: string;
        /**
         * Обработчик клика ПО ЯРЛЫКУ В ЛЮБОМ МЕСТЕ.
         * Если указан, клик обрабатывается и обработчик вызывается.
         * Если не указан, при клике ничего не происходит.
         */
        onLabelClick?: (id: TagProps['id']) => void;
        /**
         * Обработчик клика ПО СПЕЦИАЛЬНОЙ ИКОНКЕ КРЕСТИКА.
         * Если указан, в лейбле будет специально отображена иконка крестика, клик по которой и будет обработан.
         * Если не указан, иконки крестика не будет.
         * Никак не влияет на возможность передать свою иконку, однако если ярлык будет содержать ТОЛЬКО иконку,
         * дополнительная иконка крестика не будет отображена даже при наличии обработчика.
         * Если указан обработчик `onLabelClick` - данный обработчик
         * не будет работать и иконка крестика не будет отображаться
         */
        onCloseIconClick?: (id: TagProps['id']) => void;
        /**
         * Внешние отступы ярлыка.
         * Объект состоит из параметров отступа для каждой из сторон.
         * Оступы указываются числами в пикселях (без указания единиц измерения).
         */
        margins?: TagMargins;
        /**
         * Служебный параметр.
         * ТОЛЬКО ДЛЯ ЯРЛЫКА ВНУТРИ КОНТРОЛА.
         * Используется при синхронизации родительского контрола.
         * Блокирует обработку кликов по тегу или по иконке крестика.
         * В отличие от `disabled`, не влияет на визуальные стили тега.
         */
        locked?: boolean;
    };
    displayName: string;
};
export declare const defaultTagProps: TagProps;
export default Tag;
