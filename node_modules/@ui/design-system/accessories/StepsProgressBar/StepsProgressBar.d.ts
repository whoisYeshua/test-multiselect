import React from 'react';
import { ScreenWidthShortcutWithUnknown } from '@ui/screen-size-provider';
import { TooltipProps } from '../Tooltip/Tooltip';
export declare enum Status {
    ok = "ok",
    disabled = "disabled",
    warning = "warning",
    active = "active"
}
export declare type StatusType = `${Status}`;
export declare type Direction = 'vertical' | 'horizontal';
export declare type Id = string | number;
export declare type StepType = {
    /**
     * Заголовок шага.
     */
    title?: string;
    /**
     * Текст подсказки.
     */
    tooltipText?: string;
    /**
     * Вариант иконки подсказки.
     */
    tooltipIconVariant?: TooltipProps['iconVariant'];
    /**
     * Идентификатор шага.
     */
    id: Id;
    /**
     * Статус шага.
     */
    status: StatusType;
    ref?: React.RefObject<HTMLDivElement>;
    /**
     * Разрешение клика по шагу.
     */
    isNotClickable?: boolean;
};
export declare type Variant = 'smallBadge' | 'mediumBadge' | 'bigBadge';
export interface StepsProgressBarProps {
    /**
     * Список шагов.
     * Избегать <a href="/?path=/story/design-system-справочник-ссылочный-тип--docs">прямой передачи массива</a>
     */
    steps: StepType[];
    /**
     * Направление расположения шагов.
     * Если не указано, компонент попробует самостоятельно выбрать направление,
     * в зависимости от доступной ширины экрана.
     */
    direction?: Direction;
    /**
     * Добавляет горизонтальный или вертикальный невидимый скролл в зависимости от `direction`.
     * Так-же добавляет скролл к текущему шагу если в `steps` будет `ref`.
     */
    isScrollable?: boolean;
    /**
     * Скроллит к компоненту при переключении шагов.
     */
    scrollToComponent?: boolean;
    /**
     * Позволяет указать отступ сверху для автоскролла. Работает только с `scrollToComponent`.
     */
    scrollToComponentOffset?: number;
    /**
     * Позволяет задать ширину контейнера шага.
     * Рекомендуется передавать только при горизонтальном направлении шагов.
     */
    stepContainerWidth?: number;
    /**
     * Позволяет задать высоту контейнера шагов.
     * Рекомендуется передавать только при вертикальном направлении шагов.
     */
    stepsContainerHeight?: number;
    /**
     * Верхний отступ второго ряда шагов.
     */
    topIndentationOfTheSecondRow?: number;
    /**
     * Вариант отображения шагов.
     */
    variant?: Variant;
    /**
     * Обработчик клика по шагу. Используется если нужно посмотреть информацию по предыдущему шагу.
     */
    onClick?: (id: Id) => void;
    /**
     * Разрешение экрана в виде строкового тега. Передается автоматически из контекста размера экрана.
     */
    screenWidthShortcut?: ScreenWidthShortcutWithUnknown;
    /**
     * Ширина экрана в виде числа. Передается автоматически из контекста размера экрана.
     */
    screenWidth?: number;
}
declare const StepsProgressBar: React.FC<StepsProgressBarProps>;
export declare const defaultStepsProgressBarProps: Partial<StepsProgressBarProps>;
export default StepsProgressBar;
