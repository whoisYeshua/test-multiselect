import React from 'react';
import { ScreenWidthShortcut } from '~/types';
import { TypographyProps } from '../../accessories/Typography/Typography';
interface PanelCustomPaddings {
    vertical: number;
    horizontal: number;
}
export interface PanelProps {
    /**
     * Заголовок, который будет отображаться как в открытом, так и в закрытом виде.
     * Рекомендуется использовать строку в сочетании с параметром `headerType` для кастомизации типа заголовка на основе типов Typography.
     * Поддерживается кастомная разметка JSX, однако, при её применении, могут некорректно работать некоторые дополнительные стили.
     * Использовать с осторожностью и только в самых крайних случаях.
     */
    header?: React.ReactNode | string;
    /**
     * Элемент, отрисовываемый в открытой панели.
     */
    children: React.ReactNode;
    /**
     * Идентификатор блока панели
     */
    id?: string;
    /**
     * Должна ли панель быть переключаемой (от этого зависит рендер переключателя открытия/закрытия)
     */
    isCollapsible?: boolean;
    /**
     * Закрыта ли панель (по умолчанию - открыта).
     * Параметр позволяет контролировать свертывание панели извне компонента.
     * Такая логика необходима например для реализации шагов.
     */
    isClosed?: boolean;
    /**
     * Стиль границ панели.
     * `full` - границы по всему периметру панели, боковые отступы.
     * `horizontal` - только верхняя и нижняя границы, боковые отступы отсутствуют.
     * `none` - границы отсутствуют.
     * Внутренняя разметка сетки будет соответствовать внешней, при условии одинакового количества доступных колонок у контейнера.
     */
    borderStyle?: 'full' | 'horizontal' | 'none';
    /**
     * Указывает радиус скругления границ для панели с границами `full` на телефонах и планшетах.
     */
    borderRadiusMobile?: number;
    /**
     * Указывает радиус скругления границ для панели с границами `full` на десктопах.
     */
    borderRadiusDesktop?: number;
    /**
     * Стиль кнопки открытия/закрытия панели.
     * Работает только в режиме `isCollapsible`, и только если не указан `customButton`.
     * `text` - текстовая кнопка с надписями "развернуть" и "свернуть", в зависимости от состояния панели.
     * `icon` - кнопка-иконка со стрелочкой, указывающей на раскрытие/закрытие панели.
     * На мобильном разрешении доступна только кнопка типа `icon`, так как на текст не хватает места.
     */
    buttonStyle?: 'text' | 'icon';
    /**
     * Стиль фона панели.
     * Работает только в режиме границ `full`.
     */
    bgStyle?: 'white' | 'grey';
    /**
     * Отступ сверху у панели на телефонах.
     * Используется для добавления расстояний между панелями с границами `full`.
     * ВНИМАНИЕ! У параметра имеется значение по-умолчанию. Для того, чтобы отключить лишние отступы там,
     * где они не нужны, необходимо указать `0`.
     */
    mtMobile?: number;
    /**
     * Отступ сверху у панели на планшетах.
     * Используется для добавления расстояний между панелями с границами `full`.
     * ВНИМАНИЕ! У параметра имеется значение по-умолчанию. Для того, чтобы отключить лишние отступы там,
     * где они не нужны, необходимо указать `0`.
     */
    mtTablet?: number;
    /**
     * Отступ сверху у панели на десктопах.
     * Используется для добавления расстояний между панелями с границами `full`.
     * ВНИМАНИЕ! У параметра имеется значение по-умолчанию. Для того, чтобы отключить лишние отступы там,
     * где они не нужны, необходимо указать `0`.
     */
    mtDesktop?: number;
    /**
     * Внутренние отступы панели с границами `full` на телефонах.
     * Необходимо передавать объект с двумя полями - `vartical` и `horizontal`.
     * Оба поля ВСЕГДА обязательны - при замене только верхнего и нижнего отступов (vertical),
     * в поле horizontal всё равно необходимо передавать значение, даже если оно такое же, как указано по-умолчанию.
     */
    paddingsMobile?: PanelCustomPaddings;
    /**
     * Внутренние отступы панели с границами `full` на планшетах.
     * Необходимо передавать объект с двумя полями - `vartical` и `horizontal`.
     * Оба поля ВСЕГДА обязательны - при замене только верхнего и нижнего отступов (vertical),
     * в поле horizontal всё равно необходимо передавать значение, даже если оно такое же, как указано по-умолчанию.
     */
    paddingsTablet?: PanelCustomPaddings;
    /**
     * Внутренние отступы панели с границами `full` на десктопах.
     * Необходимо передавать объект с двумя полями - `vartical` и `horizontal`.
     * Оба поля ВСЕГДА обязательны - при замене только верхнего и нижнего отступов (vertical),
     * в поле horizontal всё равно необходимо передавать значение, даже если оно такое же, как указано по-умолчанию.
     */
    paddingsDesktop?: PanelCustomPaddings;
    /**
     * Верхний и нижний внутренний отступ панели с границами `horizontal` и `none` на телефонах.
     * Не путать с отступами для панелей типа `full`.
     */
    verticalPaddingsMobile?: number;
    /**
     * Верхний и нижний внутренний отступ панели с границами `horizontal` и `none` на планшетах.
     * Не путать с отступами для панелей типа `full`.
     */
    verticalPaddingsTablet?: number;
    /**
     * Верхний и нижний внутренний отступ панели с границами `horizontal` и `none` на десктопах.
     * Не путать с отступами для панелей типа `full`.
     */
    verticalPaddingsDesktop?: number;
    /**
     * Тип текста для заголовка.
     * Используются параметры `type` из компонента `Typography`.
     */
    headerType?: TypographyProps['type'];
    /**
     * Работает только в режиме границ `full`.
     * Устанавливает положение панели в сетке.
     * При указании `true`, боковые границы панели будут выступать за пределы контейнера таким образом,
     * чтобы разметка сетки внутри панели соответствовала сетке в родительском контейнере.
     * ВНИМЕНИЕ! Данный режим работает не на всех разрешениях экрана! Также следует обратить внимание, что для корректной
     * работы этой функции необходимо, чтобы параметры `maxCols` у родительского контейнера и у панели соответствовали.
     */
    inGrid?: boolean;
    /**
     * Кастомная кнопка для переключения панели, если не задана, используется один из стандартных вариантов.
     * Будет работать только при контроле состояния панели через внешний параметр `closed`.
     * При использовании необходимо учитывать доступную область для кнопки, которая зависит от доступной ширины контейнера/экрана и от длины заголовка.
     */
    customButton?: React.ReactNode;
    /**
     * Может понадобиться в некоторых случаях.
     * Запрещает переключать состояния панели (открыта/закрыта).
     * Никаких видимых изменений, только отключение обработки клика.
     */
    disabled?: boolean;
    /**
     * Дополнительный элемент, отображаемый в закрытой панели. Например, сообщение об ошибке
     */
    closedPanelData?: React.ReactNode;
    /**
     * Используется ли панель в шагах.
     * Изменяет внешний вид кнопок, игнорируя параметр `buttonType`.
     * Также меняет правила отображения кнопок (будет зависеть от заполненности `isCompleted`).
     */
    isStepPanel?: boolean;
    /**
     * ТОЛЬКО для панелей, использующихся в шагах.
     * Отметка заполненности панели. Влияет на доступность редактирования и некоторые стили.
     */
    isCompleted?: boolean;
    /**
     * Возможность указать количество колонок внутренней разметки панели на мобильных разрешениях.
     * Для ситуаций, когда панель расположена в нестандартной разметке.
     */
    maxColsMobile?: number;
    /**
     * Возможность указать количество колонок внутренней разметки панели на планшетах.
     * Для ситуаций, когда панель расположена в нестандартной разметке.
     */
    maxColsTablet?: number;
    /**
     * Возможность указать количество колонок внутренней разметки панели на десктопах.
     * Для ситуаций, когда панель расположена в нестандартной разметке.
     */
    maxColsDesktop?: number;
    /**
     * Скроллит верх экрана пользователя к заголовку при открытии панели.
     */
    scrollToOpen?: boolean;
    /**
     * Позволяет указать отступ сверху для панели для автоскролла при открытии. Работает только с scrollToOpen.
     */
    scrollToOpenOffset?: number;
    /**
     * Для панелей, используемых в шагах. Нужно для управления развертыванием извне компонента.
     */
    onChangeDataClick?: () => void;
    /**
     * Для простых сворачиваемых панелей. Может быть использовано для получения сведений об открытии/закрытии панели.
     */
    onTogglePanelClick?: (isClosed: boolean) => void;
    /**
     * Дополнительные классы основного блока панели.
     */
    className?: string;
    /**
     * Разрешение экрана в виде строкового тега. Передается автоматически из контекста размера экрана.
     */
    screenWidthShortcut?: ScreenWidthShortcut;
}
/**
 * Панель для выделения блока данных. Универсальная, сворачиваемая.
 */
declare const Panel: React.ForwardRefExoticComponent<PanelProps & React.RefAttributes<HTMLDivElement>>;
export declare const defaultPanelProps: Partial<PanelProps>;
export default Panel;
