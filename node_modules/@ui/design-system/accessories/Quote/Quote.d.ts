import React from 'react';
import { TypographyProps } from '../Typography/Typography';
import { QuoteVariant } from './helpers';
import { IconProps } from '../../icons_helpers/types';
export interface QuoteProps {
    /**
     * Вариант стилей цветовой схемы компонента.
     */
    variant?: QuoteVariant;
    /**
     * Тип компонента. Отвечает за вариацию стилей внешнего вида (не путать с вариантом цветовой схемы).
     */
    type?: 'default' | 'bordered';
    /**
     * Определяет принцип расчёта ширины компонента.
     * `container` - ширина компонента определяется родительским контейнером, например колонками сетки.
     * `content` - ширина компонента определяется внутренним контентом (текстом, заголовком, внутренними отступами)
     */
    widthCalc?: 'container' | 'content';
    /**
     * Определяет выравнивание текста, доступно только при использовании типа `bordered`.
     * Также влияет на расположение иконки относительно текста, если она указана.
     */
    textAlign?: 'left' | 'center';
    /**
     * Общий размер компонента, определяемый внутренними отступами от контента.
     */
    size?: 'medium' | 'large';
    /**
     * Заголовок.
     * Только строка.
     */
    title?: string;
    /**
     * Тип заголовка. От него зависит размер текста.
     */
    titleType?: TypographyProps['type'];
    /**
     * Текст.
     * Можно передать строку или JSX разметку, но только из строковых элементов.
     * При использовании блочных элементов, корректная работа компонента не гарантируется.
     */
    text: React.ReactNode | string;
    /**
     * Тип текста. От него зависит размер текста.
     */
    textType?: TypographyProps['type'];
    /**
     * Иконка.
     * Размещается в левом верхнем углу компонента, независимо от наличия заголовка.
     * <a href="/?path=/docs/design-system-справочник-передача-компонента-в-качестве-параметра-в-другой-компонент--docs#передача-компонента-напрямую">Передаётся напрямую.</a>
     */
    Icon?: React.ComponentType<IconProps>;
    /**
     * Дополнительные классы. Нужны для кастомизации стилей или селекторов для UI тестов.
     */
    className?: string;
}
/**
 * Quote. Используется для отображения информации.
 */
declare const Quote: React.FC<QuoteProps>;
export declare const defaultQuoteProps: Partial<QuoteProps>;
export default Quote;
