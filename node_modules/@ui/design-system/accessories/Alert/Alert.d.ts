import React from 'react';
interface Buttons {
    element: React.ReactNode;
    id: string | number;
}
export declare type AlertVariant = 'default' | 'warning' | 'success' | 'error' | 'brand-primary';
export declare type AlertType = {
    /**
     * Уникальный номер отображенного алерта.
     * Отсчет от 0 с момента загрузки редьюсера алертов.
     * Счетчик увеличивается после добавления алерта в Redux State.
     * Используется внутри onClose для работы со стором алертов.
     */
    uniqId: number;
    /**
     * Заголовок
     */
    caption?: string;
    /**
     * Текст сообщения
     */
    message: string;
    /**
     * Вариант цветовой схемы алерта.
     */
    variant?: AlertVariant;
    /**
     * Определяет будет ли отображаться кнопка закрытия для алерта.
     * Если она отображается, то алерт закрывается только по клику на нее.
     * В противном случае, алерт можно закрыть кликом по самому алерту.
     */
    shouldRenderCloseButton?: boolean;
    /**
     * Таймаут закрытия алерта в мс. Если установлено значение false,
     * алерт необходимо закрыть вручную (по клику или через редакс-стор).
     * Не работает, если алерт используется без AlertContainer.
     */
    autoClose?: boolean | number;
    /**
     * Дополнительные кнопки в алерте. Только компонент Button.
     * Не рекомендуется использовать больше 2-х кнопок.
     * Может быть как с текстом, так и с иконкой.
     * Клик по кнопке должен быть обработан за пределами контрола.
     */
    buttons?: Buttons[];
    /**
     * Иконка в алерте.
     * <a href="/?path=/docs/design-system-справочник-передача-компонента-в-качестве-параметра-в-другой-компонент--docs#передача-jsx-разметки-или-рендер-функции">Передаётся в виде JSX</a>
     */
    icon?: React.ReactNode;
    /**
     * Код алерта.
     * Используется внутри onClose для работы со стором алертов.
     */
    code?: number;
};
export interface AlertCommonProps {
    /**
     * Функция обратного вызова при закрытии алерта.
     */
    onClose?: (props: AlertProps) => void;
}
export interface AlertProps extends AlertType, AlertCommonProps {
    /**
     * Приватный метод.
     */
    removeAlert?: (uniqId: number) => void;
}
/**
 * Алерт.
 * Используя этот компонент, вы получаете
 * обычный dumb-компонент без анимации
 * и позиционирования
 */
declare const Alert: React.FC<AlertProps>;
export declare const defaultAlertProps: Partial<AlertProps>;
export default Alert;
