import React from 'react';
import { RangeInputExternalProps } from './components/RangeInput';
import { ControlWithCustomButtonProps } from '../BaseControlWrapper/ControlWrapper';
import { CurrencyEnum } from '../BaseControlWrapper/helpers';
export interface AllowedSymbolsRegexParams {
    pattern: string | RegExp;
    flag: string;
}
export declare type AutoCorrection = 'properNoun' | 'properUpperCase' | 'properRusToEng' | 'properEngToRus';
export interface InputProps extends ControlWithCustomButtonProps, Omit<RangeInputExternalProps, 'caption'> {
    /**
     * Введённое значение.
     */
    value?: string | null;
    /**
     * Плейсхолдер инпута, отображается когда на инпуте есть фокус, но ничего не введено.
     */
    placeholder?: string;
    /**
     * Позволяет указать тип инпута (только для инпута без маски).
     * Поддерживаются только варианты, не меняющие принцип работы инпута, например `number`, `password`, `tel`.
     * Отдельный вариант - `range`. Включает другой режим работы компонента.
     * Нельзя указать "не текстовый" тип инпута, такой как `checkbox` или `radio`.
     * Для таких инпутов существуют отдельные компоненты.
     */
    type?: 'text' | 'number' | 'password' | 'tel' | 'range';
    /**
     * Объекты для конструирования RegExp позволяющие вводить/вставлять только содержащиеся в себе символы.
     * Избегать <a href="/?path=/story/design-system-справочник-ссылочный-тип--docs">прямой передачи объектов</a>
     */
    allowedSymbols?: AllowedSymbolsRegexParams[];
    /**
     * Максимальная длина введённого значения
     */
    maxLength?: number;
    /**
     * Режим `OnEverySymbol` позволяет генерировать событие onChange
     * после ввода каждого символа. Также доступно регулирование частоты вызова при помощи `debounceTimer`.
     * По умолчанию `OnBlur` - событие onChange срабатывает при потере фокуса на инпуте.
     */
    flushStrategy?: 'OnBlur' | 'OnEverySymbol';
    /**
     * Автоматическое исправление значения при вводе (только для инпута без маски).
     * `properNoun` - изменяет первые буквы слов после пробела на заглавные -
     *  например, `иванов иван` будет автоматически заменено на `Иванов Иван`.
     * `properUpperCase` - переводит все вводимые буквы в заглавные.
     * `properRusToEng` - переводит вводимые буквы на английскую раскладку.
     * `properEngToRus` - переводит вводимые буквы на русскую раскладку.
     */
    autoCorrection?: AutoCorrection;
    /**
     * Перевод отображаемого значения инпута в формат числа, удобный для восприятия - `7 777 777,123`.
     * Для ввода допустимы числа, а также точка или запятая в качестве разделителя дробной части.
     * Точка при вводе автоматически заменяется на запятую, однако внешний интерфейс компонента подразумевает
     * обмен целыми числами или числами с точкой, а запятая используется только для визуального
     * форматирования (только для инпута без маски).
     */
    currencyView?: boolean;
    /**
     * Флаг запрета копирования текста из поля
     */
    preventCopy?: boolean;
    /**
     * Обработчик изменений значения.
     */
    onChange?: (props: InputProps, newValue: string) => Promise<void> | void;
    /**
     * Обработчик события начала редактирования значения. Вызывается по фокусу.
     */
    onEditStart?: (props: InputProps) => Promise<void> | void;
    /**
     * Обработчик события завершения редактирования значения. Вызывается после потери фокуса.
     */
    onEditEnd?: (props: InputProps) => Promise<void> | void;
    /**
     * Колбэк на нажатие клавиши Enter
     */
    onSubmit?: (props: InputProps) => Promise<void> | void;
    /**
     * Будет ли видна кнопка для очистки значения. Работает только в режиме `flushStrategy='OnEverySymbol'`.
     */
    clearable?: boolean;
    /**
     * Поскольку валидация у нас не завязана на существующие механизмы HTML,
     * атрибут лишь помогает настроить отображаемую клавиатуру в iOS.
     * Например, если передать pattern="[0-9]*", откроется только числовой блок.
     */
    pattern?: string;
    /**
     * Имя, используемое схемой автозаполнения браузера.
     */
    autoCompleteName?: string;
    /**
     * Параметр для автозаполнения браузером.
     */
    autoComplete?: string;
    /**
     * Автоматически устанавливает фокус в поле инпута.
     */
    autoFocus?: boolean;
    /**
     * Маска ввода/отображения.
     * Необязательные символы пишутся по принципу /\d?/ они могут быть только в конце контрола (их число не ограничено).
     * По возможности, избегать
     * <a href="/?path=/story/design-system-справочник-ссылочный-тип--docs">прямой передачи объектов</a>
     */
    maskDisplay?: string | (string | RegExp)[];
    /**
     * Маска, накладываемая на значение, отправляемое в onChange.
     * Если ее не передали, то приравняется к маске отображения.
     * По возможности, избегать
     * <a href="/?path=/story/design-system-справочник-ссылочный-тип--docs">прямой передачи объектов</a>
     */
    maskSave?: string | (string | RegExp)[];
    /**
     * Предзаполненное значение.
     * Автоматически проставляется в значение при focus и не может быть удалено пользователем.
     * ВНИМАНИЕ!
     * Предзаполненное значение должно полностью соотвествовать ожидаемой маске, иначе возможна некорректная работа
     * инпута с предзаполненным значением.
     */
    prefilledValueWithoutMask?: string;
    /**
     * Если указан и не равен `0`, добавляет задержку вызова обработчика `onChange`,
     * при использовании `flushStrategy='OnEverySymbol'`.
     * Позволяет снизить нагрузку на обработку ввода в некоторых случаях.
     * Также применяется с типом `range`, позволяя вызывать обработчик только когда движение ползунка завершено.
     * В отличии от `OnBlur`, такой способ не требует от пользователя непременного снятия фокуса с контрола,
     * для обработки введённого значения.
     */
    debounceTimer?: number | null;
    /**
     * Тип валюты. Возможные варианты: рубль, доллар, евро, тенге. Только для режима currencyView.
     */
    currencyType?: keyof typeof CurrencyEnum;
    /**
     * Отображение символа валюты.
     */
    currencyVisible?: boolean;
    /**
     * Место расположения символа валюты.
     */
    currencySymbolPosition?: 'start' | 'end';
    /**
     * Фиксированная дробная часть - 2 знака.
     */
    fractionValueLengthFixed?: boolean;
}
/**
 * Универсальное текстовое поле ввода.
 */
declare const Input: {
    (props: InputProps): JSX.Element;
    defaultProps: {
        value?: string | null;
        placeholder?: string;
        type?: 'text' | 'number' | 'password' | 'tel' | 'range';
        allowedSymbols?: AllowedSymbolsRegexParams[];
        maxLength?: number;
        flushStrategy?: 'OnBlur' | 'OnEverySymbol';
        autoCorrection?: AutoCorrection;
        currencyView?: boolean;
        preventCopy?: boolean;
        onChange?: (props: InputProps, newValue: string) => Promise<void> | void;
        onEditStart?: (props: InputProps) => Promise<void> | void;
        onEditEnd?: (props: InputProps) => Promise<void> | void;
        onSubmit?: (props: InputProps) => Promise<void> | void;
        clearable?: boolean;
        pattern?: string;
        autoCompleteName?: string;
        autoComplete?: string;
        autoFocus?: boolean;
        maskDisplay?: string | (string | RegExp)[];
        maskSave?: string | (string | RegExp)[];
        prefilledValueWithoutMask?: string;
        debounceTimer?: number | null;
        currencyType?: keyof typeof CurrencyEnum;
        currencyVisible?: boolean;
        currencySymbolPosition?: 'start' | 'end';
        fractionValueLengthFixed?: boolean;
        button?: React.ReactNode;
        caption?: string;
        status?: "error" | "success";
        scrollTopBreakpoint?: import("../../types").ScreenWidthShortcut;
        scrollTopOffset?: number;
        screenWidthShortcut?: import("../../types").ScreenWidthShortcut;
        className?: string;
        hidden?: boolean;
        id?: string;
        disabled?: boolean;
        locked?: boolean;
        errors?: string[];
        name?: string;
        errorIcon?: React.ReactNode;
        hint?: React.ReactNode;
        tooltip?: string;
        showTooltip?: boolean;
        onTooltipClick?: (props: import("../../accessories/Tooltip/Tooltip").TooltipProps) => void;
        max?: string | number;
        min?: string | number;
        step?: string | number;
        divisionValueArray?: string[];
        showDivisionScale?: boolean;
        showDivisionValue?: boolean;
        showControlBox?: boolean;
    };
    displayName: string;
};
export declare const defaultInputProps: Partial<InputProps>;
export default Input;
