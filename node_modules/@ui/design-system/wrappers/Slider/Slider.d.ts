import React from 'react';
import { ScreenWidthShortcutWithUnknown } from '@ui/screen-size-provider';
import { ButtonVariant } from '../../accessories/Button';
import { RoundingCategoryType, RoundingSizeType } from '../../helpers/styledHelpers';
export declare type SliderVariant = 'default' | 'sliderWithCards';
export interface SliderProps {
    /**
     * Массив данных, содержащий информацию, отображаемую в слайдах.
     * <a href="/?path=/story/design-system-справочник-сложные-типы-данных-в-компонентах--docs">Сложный тип данных</a>
     */
    slides?: SliderData[] | [];
    /**
     * Заголовок. Работает только с вариантом `sliderWithCards`.
     */
    header?: React.ReactNode | null;
    /**
     * Вариант слайдера. Меняет внешний вид.
     */
    variant?: SliderVariant;
    /**
     * Вариант кнопок. Работает только с вариантом `sliderWithCards`.
     */
    buttonVariant?: ButtonVariant;
    /**
     * Количество слайдов, отображаемое в слайдере на мобильных экранах.
     * Не может быть меньше 1 или больше максимального количества слайдов.
     */
    slidesToShowMobile?: number;
    /**
     * Количество слайдов, отображаемое в слайдере на планшетах.
     * Не может быть меньше 1 или больше максимального количества слайдов.
     */
    slidesToShowTablet?: number;
    /**
     * Количество слайдов, отображаемое в слайдере на десктопах.
     * Не может быть меньше 1 или больше максимального количества слайдов.
     */
    slidesToShowDesktop?: number;
    /**
     * Режим непрерывной прокрутки - возможность переключаться с последнего слайда на первый и наоборот.
     */
    isScrollInfinite?: boolean;
    /**
     * Слайд, который будет показан в слайдере первым, отсчет начинается с 0.
     */
    initialSlide?: number;
    /**
     * Скорость перелистывания слайда, в милисекундах.
     */
    speed?: number;
    /**
     * Режим автоматического перелистывания слайдов.
     */
    autoplay?: boolean;
    /**
     * Интервал между перелистываниями слайдов в мс, при режиме autoplay.
     */
    autoplaySpeed?: number;
    /**
     * Режим смены слайдов без эффекта перелистывания, в слайдере отображается 1 слайд.
     */
    fade?: boolean;
    /**
     * Возможность остановить автопролистывание слайдов наведением курсора на слайд.
     */
    pauseOnHover?: boolean;
    /**
     * Возможность задать фискированную ширину слайдера.
     */
    sliderWidth?: number | 'auto';
    /**
     * Ограничение высоты слайдов при необходимости.
     */
    slideMaxHeight?: number;
    /**
     * Установка высоты всех слайдов к одному - максимальному значению высоты.
     * Для корректной работы, необходимо, чтобы у каждого слайда был указан стиль `height: 100%`.
     * Если стиль не указан, слайд будет выравнен по верхнему краю слайдера, но не растянут по высоте.
     * Расположение контента внутри слайда остаётся на усмотрение использующего.
     */
    alignSlidesToHeight?: boolean;
    /**
     * Определяет, из какой категории брать переменную для установки скруглений границ (см. набор CSS переменных ROUNDINGS).
     */
    roundingCategory?: RoundingCategoryType;
    /**
     * Определяет размер выбранного скругления.
     * ВНИМАНИЕ! Не у каждой категории есть все возможные размеры,
     * перед кастомизацией, следует внимательно ознакомиться с набором доступных переменных.
     */
    roundingSize?: RoundingSizeType;
    /**
     * Дополнительные классы. Нужны для кастомизации стилей или селекторов для UI тестов.
     */
    className?: string;
    /**
     * Служебный параметр.
     * Только для Stories.
     * Изменяет стили.
     */
    inStories?: boolean;
    /**
     * Разрешение экрана в виде строкового тега. Передается автоматически из контекста размера экрана.
     */
    screenWidthShortcut?: ScreenWidthShortcutWithUnknown;
    /**
     * Обработчик клика по слайду. Применяется если в слайде передан `url`.
     */
    onSlideClick?: (index: number) => void;
}
export interface SliderData {
    /**
     * Идентификатор слайда.
     * Должен быть уникальным. Используется для различия слайдов в рамках логики компонента.
     */
    id: string | number;
    /**
     * Содержимое слайда.
     * Можно передать любую JSX верстку.
     * Также может быть функцией, которая возвращает верстку.
     */
    content?: React.ReactNode | (() => React.ReactNode);
    /**
     * Ссылка для отображения картинки
     */
    url?: string;
    /**
     * Не рекомендуется использовать в компоненте `Slider`
     * Заголовок сториса. Служебный проп который используется в компоненте `Stories`
     */
    title?: string;
    /**
     * Используется для описания соотношений сторон. По умолчанию 1/1.
     * Работает только вместе с `url`.
     * Состоит из строго положительного `number`, за которым следует слеш ('/') и второй строго положительный `number`.
     * Первое число представляет ширину, а второе высоту.
     */
    aspectRatio?: string;
}
/**
 * Компонент для отображения контента внутри слайдов.
 */
declare const Slider: React.FC<SliderProps>;
export declare const defaultSliderProps: SliderProps;
export default Slider;
