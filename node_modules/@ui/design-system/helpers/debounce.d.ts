declare type Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;
declare type ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : void;
export declare function debounce<T extends (...args: Parameters<T>) => ReturnType<T>>(fn: T, ms: number): (...args: Parameters<T>) => Promise<ReturnType<T>>;
export {};
