import React from 'react';
import { ScreenWidthShortcut } from '../../types';
export declare type PaddingSize = 'xs' | 's' | 'm' | 'l';
export declare type ControlsVariant = 'scroll' | 'sticky';
export interface ModalWindowProps {
    /**
     *  Определяет видимость модального окна. Стейт должен обрабатываться в родительском компоненте.
     *  Чтобы окно закрылось, ему нужно явно передавать isOpen = false
     */
    isOpen: boolean;
    /**
     *  Заголовок окна.
     */
    header?: React.ReactNode;
    /**
     * Определяет размер внутреннего отступа от контента.
     */
    paddingSize?: PaddingSize;
    /**
     * Работает только с переданным параметром `customControls`.
     * Вариант `scroll` – контролы будут скроллиться вместе с контентом.
     * Вариант `sticky` – контролы приклеиваются к низу модалки, вне зависимости от того, скроллит пользователь или нет.
     * По дефолту вариант `scroll`
     */
    controlsVariant?: ControlsVariant;
    /**
     * Кастомная верстка расположенная внизу основного контента.
     * Отступы задавать только с помощью padding для корректного вычисления размера.
     */
    customControls?: React.ReactNode;
    /**
     * Определяет будет ли рендериться кнопка в виде крестика в верхней части окна.
     * По умолчанию - рендерится.
     * При скрытии кнопки стоит обязательно добавить в customControls кнопку,
     * закрывающую окно(ее лучше добавлять и при наличии крестика для лучшего UX).
     */
    shouldRenderCloseIcon?: boolean;
    /**
     * Дополнительные классы модального окна.
     * Нужны для кастомизации стилей или селекторов для UI тестов.
     */
    className?: string;
    /**
     * Максимальная ширина окна. Применяется только если у окна по макету нестандартная ширина.
     */
    maxWidth?: number;
    /**
     * Параметр для скрытия полосы прокрутки. По умолчанию выключен.
     */
    autoHideScroll?: boolean;
    /**
     * Дочерний элемент
     */
    children?: React.ReactNode;
    /**
     * Функция для обработки закрытия окна.
     */
    onClose?(): void;
    /**
     * Высота экрана. Передается автоматически из контекста размера экрана.
     */
    screenHeight?: number;
    /**
     * Разрешение экрана в виде строкового тега. Передается автоматически из контекста размера экрана.
     */
    screenWidthShortcut?: ScreenWidthShortcut;
    /**
     * Активность во время синхронизации. Определяет блокировку окна и отображение лоадера.
     */
    locked?: boolean;
    /**
     * Блокировка возможности закрытия окна всеми стандартными способами, кроме параметра isOpen.
     */
    isManualClosingBlocked?: boolean;
}
/**
 * Универсальное модальное окно с возможностью отобразить любое содержимое.
 */
export declare const ModalWindow: React.FC<ModalWindowProps>;
export declare const defaultModalWindowProps: Partial<ModalWindowProps>;
export default ModalWindow;
