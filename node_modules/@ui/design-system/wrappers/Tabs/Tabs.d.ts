import React, { ReactElement } from 'react';
import { BadgeProps } from '../../accessories/Badge/Badge';
import { TypographyProps } from '../../accessories/Typography/Typography';
import { IconProps } from '../../icons_helpers/types';
import { ScreenWidthShortcut } from '../../types';
/**
 * Информация о ярлыке на вкладке. Позволяет указать лейбл ярлыка, а также вариант внешнего вида.
 */
export interface TabBadgeData {
    label: string;
    variant?: BadgeProps['variant'];
}
/**
 * Информация о вкладке.
 */
export interface TabData {
    /**
     * Идентификатор вкладки.
     * Должен быть уникальным. Используется для различия вкладок в рамках логики компонента,
     * также возвращается в функции `onTabChange` при выборе вкладки.
     */
    id: string | number;
    /**
     * Заголовок вкладки.
     */
    header: string;
    /**
     * Позволяет добавить ярлык в заголовок вкладки.
     * Необходимо указать лейбл ярлыка, а также его вариант, если он отличается от стандартного.
     * <a href="/?path=/story/design-system-справочник-сложные-типы-данных-в-компонентах--docs">Сложный тип данных</a>
     */
    badge?: TabBadgeData;
    /**
     * Иконка в заголовке, в отличии от ярлыка, используется исключительно в декоративных целях.
     * <a href="/?path=/docs/design-system-справочник-передача-компонента-в-качестве-параметра-в-другой-компонент--docs#передача-компонента-напрямую">Передаётся напрямую.</a>
     */
    Icon?: React.ComponentType<IconProps>;
    /**
     * Содержимое вкладки.
     * Можно передать любую JSX верстку.
     * Также может быть функцией, которая возвращает верстку,
     * для удобства использования в массиве колонок при передаче в компонент.
     */
    content: React.ReactNode | (() => React.ReactNode);
    /**
     * Блокировка вкладки. Делает вкладку некликабельной и отмечает статус при помощи стилей.
     */
    disabled?: boolean;
}
export interface TabsProps<Tab extends TabData = TabData> {
    /**
     * Массив объектов с информацией о вкладках.
     * <a href="/?path=/story/design-system-справочник-сложные-типы-данных-в-компонентах--docs">Сложный тип данных</a>
     */
    tabs: Tab[];
    /**
     * ID активной вкладки. Используется, чтобы переключить вкладку "снаружи".
     * Достаточно в любой момент передать ID любой из доступных вкладок.
     */
    activeTab?: Tab['id'];
    /**
     * Обработчик события смены вкладки.
     * Вызывается по нажатию на неактивную вкладку.
     * Принимает в аргументе уникальный идентификатор выбираемой вкладки.
     */
    onTabChange?: (id: Tab['id']) => void;
    /**
     * Определяет размер шрифта для заголовка вкладки.
     * Подробнее: <a href="/?path=/story/design-system-accessories-typography--default-h-1">Typography</a>.
     */
    headerType?: Extract<TypographyProps['type'], 'caption' | 'body'>;
    /**
     * Размер контейнера, в которой расположен заголовок вкладки.
     */
    headerAreaSize?: 's' | 'm';
    /**
     * Дополнительные классы. Нужны для кастомизации стилей или селекторов для UI тестов.
     */
    className?: string;
    /**
     * Режим добавляет горизонтальную прокрутку если все табы не помещаются в контейнере.
     */
    withScroll?: boolean;
    /**
     * Разрешение экрана в виде строкового тега. Передается автоматически из контекста размера экрана.
     */
    screenWidthShortcut?: ScreenWidthShortcut;
    /**
     * Ширина экрана в виде числа. Передается автоматически из контекста размера экрана.
     */
    screenWidth?: number;
}
export interface SelectedTabUnderlinePosition {
    offsetLeft: number;
    width: number;
}
export declare const defaultTabsProps: Partial<TabsProps>;
export declare type TabsType = <Tab extends TabData>(props: TabsProps<Tab>) => ReactElement;
declare const _default: TabsType;
export default _default;
