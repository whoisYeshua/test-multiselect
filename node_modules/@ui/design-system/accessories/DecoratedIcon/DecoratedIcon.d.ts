import React from 'react';
import { IconProps } from '../../icons_helpers/types';
export declare type DecoratedIconVariant = 'brand-primary' | 'secondary' | 'transparent' | 'success' | 'warning' | 'error' | 'brand-secondary' | 'alt-success' | 'alt-warning' | 'alt-error' | 'invisible';
export interface DecoratedIconProps {
    /**
     * Размеры декоратора. По умолчанию 'l'.
     */
    size?: 'xs' | 's' | 'm' | 'l' | 'xl';
    /**
     * Иконка внутри декоратора. Обязательный параметр.
     * <a href="/?path=/docs/design-system-справочник-передача-компонента-в-качестве-параметра-в-другой-компонент--docs#передача-компонента-напрямую">Передаётся напрямую.</a>
     */
    Icon: React.ComponentType<IconProps>;
    /**
     * Вариант цветовой схемы декоратора.
     */
    variant?: DecoratedIconVariant;
    /**
     * Вариант цвета иконки.
     * Применяется только при варианте декоратора `invisible`.
     */
    iconVariant?: IconProps['variant'];
    /**
     * Кастомный цвет иконки для случаев, когда `iconVariant` не достаточно.
     * Применяется только при варианте декоратора `invisible`.
     * Необходимо указывать строку с HEX кодом цвета или строку вида `var(--bg-bg)`
     * с переменной из основной цветовой палитры.
     * Применять только в самых крайних случаях.
     */
    iconCustomColor?: string;
    /**
     * Добавляет контейнеру тень. Применяется не для всех цветов (см. примеры).
     * При использовании тени, необходимо учитывать "сдвиг" общего размера и положения элемента
     * относительно родительского контейнера.
     */
    shadow?: boolean;
    /**
     * Дополнительные классы. Нужны для кастомизации стилей или селекторов для UI тестов.
     */
    className?: string;
}
export declare const SHADOW_AVAILABLE_VARIANTS: DecoratedIconVariant[];
/**
 * Декоративный элемент, содержащий иконку с заданным набором размеров и стилей.
 */
declare const DecoratedIcon: React.FC<DecoratedIconProps>;
export declare const defaultDecoratedIconProps: Partial<DecoratedIconProps>;
export default DecoratedIcon;
