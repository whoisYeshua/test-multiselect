import { AllowedSymbolsRegexParams, AutoCorrectionType } from '../Input';
export declare const checkSymbolsAreAllowed: (symbols: string, allowedSymbolsRegexes?: AllowedSymbolsRegexParams[]) => boolean;
export declare const formatCurrencyValueToState: (textValue: string) => string;
export declare const defaultCurrencyAllowedSymbols: AllowedSymbolsRegexParams[];
export declare const fracCurrencyAllowedSymbols: AllowedSymbolsRegexParams[];
export declare const formatCurrencyValueToView: (textValue: string, moneyVisible?: boolean, moneyType?: string, currencySymbolPosition?: string, fractionValueLengthFixed?: boolean) => string;
export declare const formatCurrencyValueToViewAfterEdit: (textValue: string) => string;
export declare const applyAutoCorrection: (text: string | null, mode?: AutoCorrectionType) => string;
export declare const createMasksForPlugin: (maskDisplayData: string | (string | RegExp)[], maskSaveData: string | (string | RegExp)[]) => {
    createdMaskDisplay: (string | RegExp)[];
    createdMaskSave: (string | RegExp)[];
};
/**
 * Очищает value элемента от содержимого маски
 * @param {string} dirtyValue Содержимое элемента вперемешку маской
 * @param {Array} mask Массив состоящий из символов и регулярных выражений
 */
export declare const getValueWithoutMask: (dirtyValue: string, mask: (string | RegExp)[]) => string;
/**
 * Проверяет заполены ли все regexp элементы маски (заполнил ли пользователь маску полностью)
 * @param {string} valueWithMaskApplied Содержимое элемента вперемешку маской
 * @param {Array} mask Массив состоящий из символов и регулярных выражений
 */
export declare const checkIfAllMaskElementsFilled: (valueWithMaskApplied: string, mask: (string | RegExp)[]) => boolean;
/**
 * Накладывает маску на строку
 * @param {String} valueWithoutMask Значение для преобразования
 * @param {Array} mask Массив состоящий из символов и регулярных выражений
 */
export declare const getValueWithMask: (valueWithoutMask: string, mask: (string | RegExp)[]) => string;
export declare const getChangedValue: (value: string, maskDisplay: (string | RegExp)[], maskSave: (string | RegExp)[]) => string;
/**
 * Установка курсора в текстовом поле в требуемую позицию
 */
export declare const safeSetCarriage: (element: HTMLInputElement, carriagePosition: number) => void;
