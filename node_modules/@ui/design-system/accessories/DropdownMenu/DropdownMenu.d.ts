import React, { ReactElement } from 'react';
import { IconProps } from '../../icons_helpers/types';
import { LinkProps } from '../Link/Link';
import { PortalProps } from '../Portal';
import { PortalAnimation, PortalVerticalAlign } from '../Portal/types';
import { ButtonProps } from '../Button/Button';
interface MenuButtonParams extends Omit<ButtonProps, 'type' | 'disableTextWrap'> {
    /**
     * Иконка.
     * Отображается на кнопках, применяется только с `menuItemsVariant = 'button'`.
     * <a href="/?path=/docs/design-system-справочник-передача-компонента-в-качестве-параметра-в-другой-компонент--docs#передача-компонента-напрямую">Передаётся напрямую.</a>
     */
    ButtonIcon?: React.ComponentType<IconProps>;
}
export interface DropdownItem {
    /**
     * Уникальный идентификатор пункта меню.
     * Применяется для обработки клика и для корректного рендера внутри итератора.
     */
    id: string | number;
    /**
     * Отображаемая пользователю надпись на кнопке или ссылке (в зависимости от `menuItemsVariant`)
     */
    label: string | number;
    /**
     * Параметры для ссылки, применяется только с `menuItemsVariant = 'link'` и только к конкретной ссылке.
     * Для применения ко всем ссылкам сразу, необходимо передать `globalLinkParams` в компонент меню.
     * Доступна передача всех основных параметров компонента `Link`.
     */
    linkParams?: LinkProps;
    /**
     * Параметры для кнопки, применяется только с `menuItemsVariant = 'button'` и только к конкретной кнопке.
     * Для применения ко всем кнопкам сразу, необходимо передать `globalButtonParams` в компонент меню.
     * Доступна передача всех основных параметров компонента `Button`,
     * а также иконка, отображаемая в кнопке - `ButtonIcon`.
     * <a href="/?path=/docs/design-system-справочник-передача-компонента-в-качестве-параметра-в-другой-компонент--docs#передача-компонента-напрямую">Передаётся напрямую.</a>
     */
    buttonParams?: MenuButtonParams;
}
declare type MenuToggleHandler = () => void;
export interface DropdownMenuProps<I extends DropdownItem = DropdownItem> {
    /**
     * Элементы выпадающего меню.
     * <a href="/?path=/story/design-system-справочник-сложные-типы-данных-в-компонентах--docs">Сложный тип данных</a>
     */
    items: I[];
    /**
     * Вариант внешнего вида заголовка выпадающего меню.
     * `default` - кнопка с текстом и анимированной иконкой выпадающего меню.
     * `context` - кнопка без надписи и с иконкой контекстного меню.
     * `custom` - кастомизируемая кнопка с возможностью самостоятельно указать все основные параметры
     * из компонента `Button` (см `customMenuButtonParams`).
     * Не применяется при использовании `renderCustomMenuButton`.
     */
    topButtonVariant?: 'default' | 'bordered' | 'context' | 'custom';
    /**
     * Текст на кнопке выпадающего меню.
     * Применяется и обязателен только при использовании `topButtonVariant = 'default' | 'bordered'`.
     * В остальных вариантах, а также в случае применения `renderCustomMenuButton` не учитывается.
     */
    topButtonText?: string;
    /**
     * Вариант внешнего вида элементов списка выпадающего меню.
     * `link` - ссылка с возможностью указать тип и адрес.
     * `button` - кнопка с возможностью указать текст и иконку.
     * Не применяется при использовании `renderCustomLabel`.
     */
    menuItemsVariant?: 'link' | 'button';
    /**
     * Параметры для главной кнопки меню.
     * Применяются ТОЛЬКО если включен `topButtonVariant = 'custom'`.
     * Доступна передача всех основных параметров компонента `Button`,
     * а также иконка, отображаемая в кнопке - `ButtonIcon`.
     * <a href="/?path=/docs/design-system-справочник-передача-компонента-в-качестве-параметра-в-другой-компонент--docs#передача-компонента-напрямую">Передаётся напрямую.</a>
     */
    customMenuButtonParams?: MenuButtonParams;
    /**
     * Параметры для всех ссылок-пунктов меню, применяется только с `menuItemsVariant = 'link'`.
     * При необходимости индивидуально кастомизировать отдельную ссылку,
     * нужно указывать `linkParams` в соответствующем `item`.
     * Доступна передача всех основных параметров компонента `Link`.
     */
    globalLinkParams?: LinkProps;
    /**
     * Параметры для всех кнопок-пунктов меню, применяется только с `menuItemsVariant = 'button'`.
     * При необходимости индивидуально кастомизировать отдельную кнопку,
     * нужно указывать `buttonParams` в соответствующем `item`.
     * Доступна передача всех основных параметров компонента `Button`,
     * а также иконка, отображаемая в кнопке - `ButtonIcon`.
     * <a href="/?path=/docs/design-system-справочник-передача-компонента-в-качестве-параметра-в-другой-компонент--docs#передача-компонента-напрямую">Передаётся напрямую.</a>
     */
    globalButtonParams?: MenuButtonParams;
    /**
     * Вариант анимации выпадающего меню.
     * Доступны некоторые варианты анимации компонента `Potral`,
     * потому что не все подходят к выпадающему меню.
     */
    menuAnimation?: `${PortalAnimation.DROPDOWN | PortalAnimation.OPACITY}`;
    /**
     * Вертикальное выравнивание выпадающего меню, относительно элемента кнопки/ссылки.
     * Подробнее о вариантах выравнивания в документации компонента `Portal`.
     */
    menuVerticalAlign?: `${PortalVerticalAlign.TOP | PortalVerticalAlign.BOTTOM}`;
    /**
     * Горизонтальное выравнивание выпадающего меню, относительно элемента кнопки/ссылки.
     * Подробнее о вариантах выравнивания в документации компонента `Portal`.
     */
    menuHorizontalAlign?: PortalProps['horizontalAlign'];
    /**
     * Активность. Определяет, доступен ли клик по кнопке меню.
     */
    disabled?: boolean;
    /**
     * Закрытие меню при клике по ссылке/кнопке, после срабатывания обработчика `onItemClick`.
     */
    closeMenuOnItemClick?: boolean;
    /**
     * Функция, возвращающая JSX вёрстку, для рендера кнопки меню.
     * Заменяет варианты из `topButtonVariant`, в том числе все стили и анимации.
     * Применяется в случае необходимости кастомизации кнопки меню.
     * <a href="/?path=/docs/design-system-справочник-рендер-функции--docs#рендер-функции-в-компонентах">Рендер-функция</a>
     */
    renderCustomMenuButton?: (onClick: MenuToggleHandler, opened: boolean, disabled?: boolean) => React.ReactNode;
    /**
     * Функция, возвращающая JSX вёрстку, для рендера элементов выпадающего меню.
     * Заменяет варианты из `menuItemsVariant`, в том числе все стили и анимации.
     * Применяется в случае необходимости кастомизации элементов выпадающего меню.
     * ВНИМАНИЕ! При использовании кастомизации, необходимо учитывать, что компонент меню блокирует все события,
     * связанные с кликом, в том числе и всплывшие от айтемов. Если не понятно, о чем речь - лучше не использовать.
     * Если понятно, имеет смысл блокировать всплытие на стороне рендера лейбла, чтобы событие обрабатывалось элементом
     * корректно и не стопарилось.
     * <a href="/?path=/docs/design-system-справочник-рендер-функции--docs#рендер-функции-в-компонентах">Рендер-функция</a>
     */
    renderCustomLabel?: (item: I, onClick: DropdownMenuProps['onItemClick']) => React.ReactNode;
    /**
     * Функция, возвращающая JSX вёрстку, для рендера любого контента в выпадающем портале.
     * При использовании, полностью игнорирует опции меню и отрисовывает переданный в функции JSX "как есть".
     * Обработка кликов на элементы кастомного контента полностью осуществляется на стороне приложения.
     * <a href="/?path=/docs/design-system-справочник-рендер-функции--docs#рендер-функции-в-компонентах">Рендер-функция</a>
     */
    renderCustomContent?: () => React.ReactNode;
    /**
     * Обработчик клика по пункту выпадающего меню. Возвращает `id` пункта для обработки.
     * При использовании ссылок в качестве пунктов меню не обязателен.
     */
    onItemClick?: (id: I['id']) => void;
    /**
     * Обработчик события закрытия выпадающего меню.
     */
    onClose?: () => void;
    /**
     * Дополнительные классы компонента. Нужны для кастомизации стилей или селекторов для UI тестов.
     */
    className?: string;
}
export declare const defaultDropdownMenuProps: Partial<DropdownMenuProps>;
export declare type DropdownMenuType = <I extends DropdownItem>(props: DropdownMenuProps<I>) => ReactElement;
declare const _default: DropdownMenuType;
export default _default;
