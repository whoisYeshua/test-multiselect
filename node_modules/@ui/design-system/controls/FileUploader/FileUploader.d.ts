import React, { ReactElement } from 'react';
import { ScreenWidthShortcutWithUnknown } from '@ui/screen-size-provider';
import { ControlProps } from '../BaseControlWrapper/ControlWrapper';
import { ContainerColumnParams } from '../../grid/components/Column';
export interface FileInfo {
    fileName: string;
    uniqueId: string;
    url?: string;
    fileLength?: number;
    fileGroupGuid?: string;
    [key: string]: unknown;
}
interface FileConfig {
    fileGroupGuid: string;
    formDataKey: string;
    fileName: string;
    fileLength: number;
}
declare type OnFileUploadValue<T extends boolean> = T extends true ? File : FormData;
export interface FileUploaderProps<IsOnFileUploadUseFile extends boolean = false> extends ControlProps {
    /**
     * Максимальное количество файлов.
     */
    maxFilesCount?: number;
    /**
     * Доступные типы для загрузки файла. При попытке загрузки файла недопустимого типа появляется сообщение об ошибке.
     * При указании `null` не будет применяться дефолтное ограничение и будет доступна загрузка файлов любого типа.
     */
    acceptedFileTypes?: string | null;
    /**
     * Максимальный размер файла (в байтах).
     */
    maxFileSize?: number;
    /**
     * Если активно, при загрузке изображений, автоматически попытается сжать их таким образом,
     * чтобы размер файла не превышал указанный `maxFileSize`.
     */
    autoCompress?: boolean;
    /**
     * ID группы файлов.
     */
    filesGroupId?: string;
    /**
     * Подзаголовок.
     */
    subTitle?: string | React.ReactNode;
    /**
     * Текст загрузки файла в дропзоне.
     */
    dropzoneMessage?: string;
    /**
     * Подзаголовок в дропзоне.
     */
    dropzoneMessageSubtitle?: string;
    /**
     * Отображает `caption` и `subTitle` внутри дропзоны.
     * Игнорирует `dropzoneMessage` и `dropzoneMessageSubtitle`.
     */
    showCaptionInDropzone?: boolean;
    /**
     * Выравнивание текста дропзоны. По умолчанию слева. При выравнивании текста по центру
     * иконка не отображается.
     */
    dropzoneMessageTextAlign?: 'left' | 'center';
    /**
     * Имеет приоритет над `dropzoneExamplePictureUrl`.
     * Содержимое блока "пример файла" для дропзоны.
     * Должен содержать JSX - вёрстку или изображение.
     * Отображение и центрирование контента на совести разработчика, рекомендуемое соотношение сторон блока 3 / 2.
     */
    dropzoneExample?: React.ReactNode | (() => React.ReactNode);
    /**
     * Игнорируется при использовании `dropzoneExample`.
     * Путь до картинки, которая будет отображаться в дропзоне.
     * Можно использовать в качестве примера загружаемых файлов: образец паспорта, образец договора и т.д.
     * Картинка должна иметь соотношение сторон 3 / 2.
     */
    dropzoneExamplePictureUrl?: string;
    /**
     * Массив с информацией о загруженных файлах.
     * <a href="/?path=/story/design-system-справочник-сложные-типы-данных-в-компонентах--docs">Сложный тип данных</a>
     */
    filesInfo?: FileInfo[] | null;
    /**
     * Параметр для файлового инпута, отвечающий за возможность мультизагрузки.
     * Подробнее:
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/multiple" target="_blank">multiple file input</a>
     */
    multiple?: boolean;
    /**
     * Тип отображения загруженных файлов.
     * `image` - миниатюры в качестве превью и модальным окном для просмотра,
     * для файлов НЕ в формате изображений применяются особые карточки-ссылки.
     * `doc` - отображает список ссылок на скачивание.
     */
    viewType?: 'doc' | 'image';
    /**
     * Вариант отображения файлов в режиме `doc`.
     * `base` - отображает ссылки на файлы с иконками статусов, и кнопками-иконками для контроля.
     * `detailed` - отображает плитки с базовыми ссылками и иконками, но дополненные текстовыми статусами,
     * отражающими состояние файла.
     * Не применяется в режиме `image`.
     */
    docVariant?: 'base' | 'detailed';
    /**
     * Способ выбора файлов для загрузки.
     * `input` - "классическая" кнопка для открытия системного окна загрузки, стилизована.
     * Доступно только в режиме `image`.
     * `dropzone` - дропзона для загрузки, содержащая внутри себя также "классическую" кнопку -
     * позволяет как перетащить файлы в дропзону, так и загрузить через стандартный интерфейс выбора.
     * В режиме загрузки и отображения документов `doc`, доступна только дропзона.
     */
    selectType?: 'input' | 'dropzone';
    /**
     * Ключ поля для файла в FormData
     */
    formDataKey?: string;
    /**
     * Если ссылка на файл была создана с помощью URL.createObjectURL(blob),
     * то необходимо произвести очистку после загрузки файла по этой ссылке.
     */
    shouldImageRevoke?: boolean;
    /**
     * Параметр отвечающий за тип файла передаваемого в метод `onFileUpload`.
     * При значении `true` передается `File`
     * По умолчанию `FormData`
     */
    isOnFileUploadUseFile?: IsOnFileUploadUseFile;
    /**
     * При использовании `Promise` в обработчике загрузки файлов,
     * в режиме мультизагрузки `multiple` доступно отслеживание статуса загрузки для каждого файла отдельно.
     * При ошибках, у каждого файла появится отдельная кнопка "Повторить", однако, если файлов много,
     * можно опционально включить кнопку "Повторить загрузку",
     * которая позволяет предпринять попытку заново загрузить все незагруженные файлы разом.
     * Доступно только в режиме `doc`.
     */
    showRetryAllButton?: boolean;
    /**
     * При использовании `Promise` в обработчике загрузки файлов,
     * в режиме мультизагрузки `multiple` доступно отслеживание статуса загрузки для каждого файла отдельно.
     * В случае ошибки в Promise, у каждого незагруженного файла будет соответствующий визуальный статус
     * или даже индивидуальный текст ошибки при использовании `docVariant='detailed'`.
     * Этот параметр позволяет включать или отключать общее сообщение об ошибке загрузки некоторых файлов.
     */
    showRetryErrorMessage?: boolean;
    /**
     * Отключение валидации на уникальность имени файла.
     * При использовании параметра, имена загружаемых и загруженных файлов не валидируются на уникальность,
     * например в случае загрузки файлов "сразу с камеры" в некоторых мобильных браузерах,
     * так как там файлы имеют одинаковые имена, но фактически являются разными.
     */
    disableFileNameValidation?: boolean;
    /**
     * Обработчик загрузки файла.
     * Для корректной работы с незагруженными файлами должен возвращать `Promise`,
     * который будет отклонён при ошибке загрузки файла.
     * В противном случае, отслеживание статусов по отдельным файлам будет невозможно
     * и обработка ошибок должна происходить на стороне приложения. Для этих целей,
     * можно отключить флаг `multiple`, чтобы каждый файл загружался отдельно.
     */
    onFileUpload: (value: OnFileUploadValue<IsOnFileUploadUseFile>, fileConfig: FileConfig) => Promise<void> | void;
    /**
     * Обработчик клика по "ссылке" на файл.
     * Может применяться в случаях, когда у файлов не указан прямой URL для скачивания.
     * Обработчик должен вызвать метод, возвращающий файл для скачивания, на основе `id` файла.
     * Может применяться только в режиме `doc`, так как в режиме `image` URL картинок обязательны
     */
    onFileDownload?: (id: FileInfo['uniqueId']) => void;
    /**
     * Обработчик удаления файла.
     */
    onFileRemove: (id: FileInfo['uniqueId']) => Promise<void> | void;
    /**
     * Метод срабатывает после завершения загрузки всех файлов,
     * независимо от того, был ли один или все файлы загружены с ошибками.
     */
    onUploadFinish?(): void;
    /**
     * Метод срабатывает, если не прошла внутренняя валидация файла. Возвращает ошибку и информацию о файле.
     */
    onValidationError?(file: {
        fileName: string;
        fileType: string;
        fileSize: number;
        uploadErrors: string[];
    }): void;
    /**
     * Разрешение экрана в виде строкового тега. Передается автоматически из контекста размера экрана.
     */
    screenWidthShortcut?: ScreenWidthShortcutWithUnknown;
    /**
     * Информация о максимальном количестве колонок у родительского контейнера.
     * Автоматически наследуется из него или использует дефолтные значения.
     */
    columnParams?: ContainerColumnParams;
}
export declare const defaultFileUploaderProps: Partial<FileUploaderProps>;
export declare type FileUploaderType = <IsOnFileUploadUseFile extends boolean = false>(props: FileUploaderProps<IsOnFileUploadUseFile>) => ReactElement;
declare const _default: FileUploaderType;
export default _default;
