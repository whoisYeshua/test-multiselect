import React from 'react';
import FileUploader from '../FileUploader/FileUploader';
interface FileGuid {
    value: string;
    fileStatus: boolean;
}
interface GroupName {
    name?: string;
    caption: string;
    tooltip?: {
        body: string | React.ReactNode;
        header?: string;
    } | null;
}
export interface FileInfo {
    fileGuid: FileGuid;
    fileName: {
        value: string;
    };
    url?: string;
    uniqueId: string;
}
declare type FileUploaderProps = React.ComponentProps<typeof FileUploader>;
export interface FileUploaderUiCoreAdaptationProps extends Omit<FileUploaderProps, 'filesGroupId' | 'inputName' | 'caption' | 'subTitle' | 'filesInfo' | 'formDataKey'> {
    /**
     * ID группы файлов. Передаётся из providePropsToWidgetHOC из UICore.
     */
    fileGroupGuid?: {
        value: string;
    };
    /**
     * Объект содержащий имя инпута, заголовок и подзаголовок группы файлов.
     * Передаётся из providePropsToWidgetHOC из UICore.
     */
    fileGroupName: GroupName;
    /**
     * Массив с информацией о загруженных файлах. Передаётся из providePropsToWidgetHOC из UICore.
     */
    fileInfos: FileInfo[];
    /**
     * Скрытие заголовока даже когда он передан в `fileGroupName`.
     * В связи с особенностью работы синхронизации, `caption` является обязательным полем.
     * Его нельзя просто не передавать для скрытия, как это сделано в `FileUploader`.
     */
    hideCaption?: boolean;
    /**
     * Скрытие подзаголовка, даже если он передан в `fileGroupName`.
     */
    hideSubTitle?: boolean;
}
/**
 * Компонент, адаптированный для синхронизации ИРИС, для загрузки файлов.
 */
declare const FileUploaderUiCoreAdaptation: React.FC<FileUploaderUiCoreAdaptationProps>;
export default FileUploaderUiCoreAdaptation;
