import React from 'react';
import { IconProps } from '../../icons_helpers/types';
import { DecoratedIconProps } from '../../accessories/DecoratedIcon/DecoratedIcon';
import { TypographyProps } from '../../accessories/Typography/Typography';
export interface CardLightProps {
    /**
     * Заголовок карточки. Передаётся в виде текста.
     */
    header?: string;
    /**
     * Тип заголовка в карточке.
     * Подробнее: <a href="/?path=/story/design-system-accessories-typography--default-h-1">Typography</a>.
     */
    headerType?: TypographyProps['type'];
    /**
     * Определяет позиционирование заголовка относительно иконки в карточке.
     * При использовании `right`, необходимо учитывать длину заголовка и доступную для него ширину родителя,
     * а также потенциальные переносы строк.
     */
    headerPosition?: 'bottom' | 'right';
    /**
     * Тип фона для карточки, белый либо серый.
     * При использовании фона необходимо учитывать содержимое карточки.
     */
    bgStyle?: 'white' | 'grey';
    /**
     * Иконка в карточке.
     * <a href="/?path=/docs/design-system-справочник-передача-компонента-в-качестве-параметра-в-другой-компонент--docs#передача-компонента-напрямую">Передаётся напрямую.</a>
     */
    Icon?: React.ComponentType<IconProps>;
    /**
     * Размер контейнера иконки.
     * Применяется для всех вариантов `iconBoxVariant`.
     * От размера контейнера также зависит размер иконки внутри него.
     */
    iconBoxSize?: DecoratedIconProps['size'];
    /**
     * Вариант цветовой схемы
     * <a href="/?path=/story/design-system-accessories-decoratedicon--default-decorated-icon">декоратора иконки</a>.
     */
    iconDecoratorVariant?: DecoratedIconProps['variant'];
    /**
     * Вариант цвета иконки.
     * Применяется только при варианте декоратора `invisible`.
     */
    iconVariant?: IconProps['variant'];
    /**
     * Кастомный цвет иконки для случаев, когда `iconVariant` не достаточно.
     * Применяется только при варианте декоратора `invisible`.
     * Необходимо указывать строку с HEX кодом цвета или строку вида `var(--base-bg)`
     * с переменной из основной цветовой палитры.
     * Применять только в самых крайних случаях.
     */
    iconCustomColor?: string;
    /**
     * Добавляет декоратора иконки тень. Применяется не для всех цветовых схем декоратора (см. примеры).
     */
    iconShadow?: boolean;
    /**
     * Внутренние отступы на телефонах.
     */
    paddingMobile?: number;
    /**
     * Внутренние отступы на планшетах.
     */
    paddingTablet?: number;
    /**
     * Внутренние отступы на десктопах.
     */
    paddingDesktop?: number;
    /**
     * Дополнительные классы. Нужны для кастомизации стилей или селекторов для UI тестов.
     */
    className?: string;
    /**
     * Содержимое карточки.
     */
    children?: React.ReactNode;
}
/**
 * Карточка для отображения информации.
 */
declare const CardLight: React.FC<CardLightProps>;
export declare const defaultCardLightProps: CardLightProps;
export default CardLight;
