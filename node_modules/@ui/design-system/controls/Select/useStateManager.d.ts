import React from 'react';
/**
 * Базовый элемент списка для контролов, работающих с выбором значения из списка доступных.
 */
export interface SelectableControlItem {
    /**
     * Код элемента, должен быть уникальным.
     * По умолчанию, отправляется во все обработчики `onChange` при выборе элемента в контроле
     */
    code: string | number | null;
    /**
     * Отображаемое значение элемента. Должен быть понятен пользователю
     */
    label: string | null;
    /**
     * В некоторых контролах, например `RadioGroup`
     * у каждого из элементов может быть индивидуальная всплывающая подсказка, также, как и у контрола в целом
     */
    tooltip?: string;
    /**
     * Делает `конкретную опцию` недоступной для выбора.
     * Не путать с `disabled` для всего контрола, так как там выбор блокируется в принципе
     */
    disabled?: boolean;
    /**
     * Выбрана ли данная опция. Нужно для подсвечивания опции
     */
    isSelected?: boolean;
    /**
     * Отметка о том, что опция добавлена пользователем. Доступно при импользовании режима `creatable`
     */
    isCreatable?: boolean;
}
export declare type ItemCode<Item extends SelectableControlItem> = Item['code'];
declare type Value<Item extends SelectableControlItem, UseFullItem extends boolean> = UseFullItem extends true ? Item : ItemCode<Item>;
export declare type ClearValue<Item extends SelectableControlItem, IsMulti extends boolean, UseFullItem extends boolean> = IsMulti extends true ? null : UseFullItem extends true ? Item : null;
export declare type SelectValue<Item extends SelectableControlItem, IsMulti extends boolean, UseFullItem extends boolean> = IsMulti extends true ? Value<Item, UseFullItem>[] : Value<Item, UseFullItem>;
interface UseStateManagerProps<Item extends SelectableControlItem, IsMulti extends boolean, UseFullItem extends boolean> {
    items: Item[];
    value?: SelectValue<Item, IsMulti, UseFullItem>;
    creatable?: boolean;
    showValueInInput?: boolean;
    useFullItem: UseFullItem;
    isMulti: IsMulti;
    isAsyncSearchable: boolean;
    isSearchable: boolean;
    isCombined?: boolean;
    debounceTimer?: number;
    optionsLoadingErrorMessage?: string;
    checkboxOptions: boolean;
    isPickAllOptionsItem: boolean;
    isOpen: boolean;
    inputRef: React.MutableRefObject<HTMLInputElement>;
    setIsOpen: (value: React.SetStateAction<boolean>) => void;
    onOptionsSearch?: (query: string) => Promise<Item[] | void>;
    setErrorState: (value: React.SetStateAction<string[]>) => void;
    onChange: (newValue: SelectValue<Item, IsMulti, UseFullItem>) => void;
    onEditEnd: () => void;
    onEditStart: () => void;
}
export declare const useStateManager: <Item extends SelectableControlItem, IsMulti extends boolean, UseFullItem extends boolean>({ items, isMulti, value, creatable, checkboxOptions, isPickAllOptionsItem, showValueInInput, useFullItem, debounceTimer, isAsyncSearchable, isSearchable, isCombined, isOpen, inputRef, optionsLoadingErrorMessage, onOptionsSearch, setErrorState, setIsOpen, onChange, onEditEnd, onEditStart, }: UseStateManagerProps<Item, IsMulti, UseFullItem>) => {
    onSelectOption: (multiValue: Item) => void;
    onRemoveOption: (option: Item) => void;
    inputValue: string;
    selectedValue: Item | Item[];
    isLoading: boolean;
    options: Item[];
    optionsWithSelectedItems: Item[];
    setOptionsWithSelectedItems: React.Dispatch<React.SetStateAction<Item[]>>;
    onInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
    onDropdownInputChange: (enteredValue: string) => void;
    setSelectedValue: React.Dispatch<React.SetStateAction<Item | Item[]>>;
    setOptions: React.Dispatch<React.SetStateAction<Item[]>>;
    setInputValue: React.Dispatch<React.SetStateAction<string>>;
    filteredOptions: <Item_1 extends SelectableControlItem>(options: Item_1[], selectedValues: (string | number | Item_1)[]) => Item_1[];
    showValue: boolean;
    closeMenu: (_?: React.MouseEvent, dadataValue?: string) => void;
};
export {};
